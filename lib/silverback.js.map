{"version":3,"sources":["webpack:///webpack/bootstrap 301ba823fc9c0b190441","webpack:///./src/utils/Dictionary.ts","webpack:///./src/utils/LinkedList.ts","webpack:///./node_modules/mini-signals/lib/mini-signals.js","webpack:///./src/core/ComponentsFamily.ts","webpack:///./src/core/NodePool.ts","webpack:///./src/index.ts","webpack:///./node_modules/tslib/tslib.es6.js","webpack:///./src/core/Engine.ts","webpack:///./src/utils/SystemSort.ts","webpack:///./src/core/Entity.ts","webpack:///./src/core/System.ts","webpack:///./src/core/Node.ts","webpack:///./src/core/Scene.ts"],"names":[],"mappings":"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K,eACV;AAAC;AACL,WAAC;AAAA;AAzNY,qBAAU,W;;;;;;;ACVvB;;AAEA;AACA;AACA,CAAC;;AAED,iCAAiC,2CAA2C,gBAAgB,kBAAkB,OAAO,2BAA2B,wDAAwD,gCAAgC,uDAAuD,2DAA2D,EAAE,EAAE,yDAAyD,qEAAqE,6DAA6D,oBAAoB,GAAG,EAAE;;AAEljB,iDAAiD,0CAA0C,0DAA0D,EAAE;;AAEvJ;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;;AAED;;AAEA;AACA;;;;;;;;;ACpKiD;;;AAQ9C;;;;;;;AACH,qCAAoC;AACpC,uCAA+C;AAI/C,uCAA+C;AAE/C;AAcO;;;;;;;AACH,8BAAyB,WAAe;AAChC,aAAW,aAAa;AACxB,aAAQ,UAAU;AAElB,aACR;AAAC;AAKE;;;;AACK,+BAAK,QAAb;AACQ,aAAO,SAAG,IAAI,aAAa;AAC3B,aAAU,YAAG,IAAI,aAAa,cAAoB;AAClD,aAAY,cAAG,IAA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","file":"silverback.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./lib/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 301ba823fc9c0b190441","/// <reference path=\"../../typings/index.d.ts\" />\n\nexport class Dictionary {\n\n    private _keys: any[];\n    private _values: any[];\n\n    constructor() {\n        this._keys = [];\n        this._values = [];\n    }\n\n    public add(key, value) {\n        let keyIndex = this.getIndex(key);\n\n        if (keyIndex >= 0) {\n            this._values[keyIndex] = value;\n        } else {\n            this._keys.push(key);\n            this._values.push(value);\n        }\n    }\n\n    public remove(key):any {\n        let keyIndex = this.getIndex(key);\n\n        if (keyIndex >= 0) {\n            var removedValue = this._values[keyIndex];\n            this._keys.splice(keyIndex, 1);\n            this._values.splice(keyIndex, 1);\n            return removedValue;\n        } else {\n            throw 'Key does not exist';\n        }\n    }\n\n    public getValue(key) {\n        let value = null;\n        let keyIndex = this.getIndex(key);\n\n        if (keyIndex >= 0) {\n            value = this._values[keyIndex];\n        }\n        return value;\n    }\n\n    public getIndex(testKey) {\n        let len = this._keys.length;\n        let key;\n\n        for (let i = 0; i < len; ++i) {\n            key = this._keys[i];\n            if (key === testKey) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    public has(testKey) {\n        let len = this._keys.length;\n        let key;\n\n        for (let i = 0; i < len; ++i) {\n            key = this._keys[i];\n            if (key === testKey) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public values(): any[] {\n        let len = this._keys.length;\n        let key;\n        let value;\n        let arValue: any[] = [];\n\n        for (let i = 0; i < len; ++i) {\n            key = this._keys[i];\n            value = this._values[i];\n            arValue.push(value);\n        }\n        return arValue;\n    }\n\n    public forEach(action) {\n        let len = this._keys.length;\n        let key;\n        let value;\n\n        for (let i = 0; i < len; ++i) {\n            key = this._keys[i];\n            value = this._values[i];\n            var breakHere = action(key, value);\n            if (breakHere === 'return') {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/utils/Dictionary.ts","/**\n *  Linked List implementation in JavaScript, Released under the MIT license\n *  https://github.com/nzakas/computer-science-in-javascript/\n *\n *  @author     Stefan Herndlbauer, 2015, TypeScript conversion\n *  @author     Nicholas C. Zakas, 2009, Doubly Linked List\n *\n *  @url        http://www.gorillabyte.com\n */\n\nexport class LinkedList {\n\n    /**\n     * Pointer to first item in the list.\n     * @property _head\n     * @type Object\n     * @private\n     */\n    private _head = null;\n\n    /**\n     * Pointer to last item in the list.\n     * @property _tail\n     * @type Object\n     * @private\n     */\n    private _tail = null;\n\n    /**\n     * The number of items in the list.\n     * @property _length\n     * @type number\n     * @private\n     */\n    private _length = 0;\n\n    /**\n     * Appends some data to the end of the list. This method traverses\n     * the existing list and places the value at the end in a new item.\n     * @param {any} data The data to add to the list.\n     * @return {Void}\n     * @method add\n     */\n    public add(data) {\n\n        // Create a new item object, place data in\n        var node = {\n            data: data,\n            next: null,\n            previous: null\n        };\n\n        // Special case: no items in the list yet\n        if (this._length === 0) {\n            this._head = node;\n            this._tail = node;\n            // If node has next and previous properties\n            if (typeof data.next !== 'undefined') {\n                data.next = data.previous = null;\n            }\n        } else {\n\n            // Attach to the tail node\n            this._tail.next = node;\n            node.previous = this._tail;\n            node.next = null;\n            this._tail = node;\n        }\n        // Don't forget to update the count\n        this._length++;\n    }\n\n    /**\n     * Retrieves the data in the given position in the list.\n     * @param {number} index The zero-based index of the item whose value should be returned.\n     * @return {any} The value in the \"data\" portion of the given item or null if the item doesn't exist.\n     * @method item\n     */\n    public item(index:number) {\n        //check for out-of-bounds values\n        if (index > -1 && index < this._length) {\n            var current = this._head,\n                i = 0;\n\n            while (i++ < index) {\n                current = current.next;\n            }\n\n            return current.data;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Removes the item from the given location in the list.\n     * @param {int} index The zero-based index of the item to remove.\n     * @return {any} The data in the given position in the list or null if\n     *      the item doesn't exist.\n     * @method remove\n     */\n    public remove(index:number) {\n        // Check for out-of-bounds values\n        if (index > -1 && index < this._length) {\n\n            let current = this._head;\n            let i = 0;\n\n            // Special case: removing first item\n            if (index === 0) {\n                this._head = current.next;\n\n                /*\n                 * If there's only one item in the list and you remove it,\n                 * then this._head will be null. In that case, you should\n                 * also set this._tail to be null to effectively destroy\n                 * the list. Otherwise, set the previous pointer on the new\n                 * this._head to be null.\n                 */\n                if (!this._head) {\n                    this._tail = null;\n                } else {\n                    this._head.previous = null;\n                }\n\n                //special case: removing last item\n            } else if (index === this._length - 1) {\n                current = this._tail;\n                this._tail = current.previous;\n                this._tail.next = null;\n            } else {\n\n                //find the right location\n                while (i++ < index) {\n                    current = current.next;\n                }\n\n                //skip over the item to remove\n                current.previous.next = current.next;\n                current.next.previous = current.previous;\n            }\n\n            // Decrement the length\n            this._length--;\n\n            // Return the value\n            return current.data;\n\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the number of items in the list.\n     * @return {int} The number of items in the list.\n     * @method size\n     */\n    public size() {\n        return this._length;\n    }\n\n    /**\n     * Converts the list into an array.\n     * @return {Array} An array containing all of the data in the list.\n     * @method toArray\n     */\n    public toArray() {\n        let result = [];\n        let current = this._head;\n\n        while (current) {\n            result.push(current.data);\n            current = current.next;\n        }\n        return result;\n    }\n\n    /**\n     * Converts the list into a string representation.\n     * @return {String} A string representation of the list.\n     * @method toString\n     */\n    public toString() {\n        return this.toArray().toString();\n    }\n\n    /**\n     * Returns the first element in this list.\n     * @return {any} The first element of the list or undefined if the list is empty.\n     */\n    public get first() {\n        if (this._head !== null) {\n            return this._head.data;\n        }\n        return undefined;\n    }\n\n    /**\n     * Returns the last element in this list.\n     * @return {any} the last element in the list or undefined if the list is empty.\n     */\n    public get last() {\n        if (this._tail !== null) {\n            return this._tail.data;\n        }\n        return undefined;\n    }\n\n    /**\n     * Returns the a list element by its type.\n     * @return {any} The element of the list or null if the item was not in the list.\n     */\n    public get(type) {\n        let current:any = this._head;\n        if (typeof current.data.is === 'function') {\n            while (current) {\n                if (current.data.is(type)) {\n                    return current.data;\n                }\n                current = current.next;\n            }\n        } else {\n            console.log('This type <' + type + '> does not support this method.');\n        }\n        return null;\n    }\n}\n\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/LinkedList.ts","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar MiniSignalBinding = (function () {\n  function MiniSignalBinding(fn, once, thisArg) {\n    if (once === undefined) once = false;\n\n    _classCallCheck(this, MiniSignalBinding);\n\n    this._fn = fn;\n    this._once = once;\n    this._thisArg = thisArg;\n    this._next = this._prev = this._owner = null;\n  }\n\n  _createClass(MiniSignalBinding, [{\n    key: 'detach',\n    value: function detach() {\n      if (this._owner === null) return false;\n      this._owner.detach(this);\n      return true;\n    }\n  }]);\n\n  return MiniSignalBinding;\n})();\n\nfunction _addMiniSignalBinding(self, node) {\n  if (!self._head) {\n    self._head = node;\n    self._tail = node;\n  } else {\n    self._tail._next = node;\n    node._prev = self._tail;\n    self._tail = node;\n  }\n\n  node._owner = self;\n\n  return node;\n}\n\nvar MiniSignal = (function () {\n  function MiniSignal() {\n    _classCallCheck(this, MiniSignal);\n\n    this._head = this._tail = undefined;\n  }\n\n  _createClass(MiniSignal, [{\n    key: 'handlers',\n    value: function handlers() {\n      var exists = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];\n\n      var node = this._head;\n\n      if (exists) return !!node;\n\n      var ee = [];\n\n      while (node) {\n        ee.push(node);\n        node = node._next;\n      }\n\n      return ee;\n    }\n  }, {\n    key: 'has',\n    value: function has(node) {\n      if (!(node instanceof MiniSignalBinding)) {\n        throw new Error('MiniSignal#has(): First arg must be a MiniSignalBinding object.');\n      }\n\n      return node._owner === this;\n    }\n  }, {\n    key: 'dispatch',\n    value: function dispatch() {\n      var node = this._head;\n\n      if (!node) return false;\n\n      while (node) {\n        if (node._once) this.detach(node);\n        node._fn.apply(node._thisArg, arguments);\n        node = node._next;\n      }\n\n      return true;\n    }\n  }, {\n    key: 'add',\n    value: function add(fn) {\n      var thisArg = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n      if (typeof fn !== 'function') {\n        throw new Error('MiniSignal#add(): First arg must be a Function.');\n      }\n      return _addMiniSignalBinding(this, new MiniSignalBinding(fn, false, thisArg));\n    }\n  }, {\n    key: 'once',\n    value: function once(fn) {\n      var thisArg = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n      if (typeof fn !== 'function') {\n        throw new Error('MiniSignal#once(): First arg must be a Function.');\n      }\n      return _addMiniSignalBinding(this, new MiniSignalBinding(fn, true, thisArg));\n    }\n  }, {\n    key: 'detach',\n    value: function detach(node) {\n      if (!(node instanceof MiniSignalBinding)) {\n        throw new Error('MiniSignal#detach(): First arg must be a MiniSignalBinding object.');\n      }\n      if (node._owner !== this) return this;\n\n      if (node._prev) node._prev._next = node._next;\n      if (node._next) node._next._prev = node._prev;\n\n      if (node === this._head) {\n        this._head = node._next;\n        if (node._next === null) {\n          this._tail = null;\n        }\n      } else if (node === this._tail) {\n        this._tail = node._prev;\n        this._tail._next = null;\n      }\n\n      node._owner = null;\n      return this;\n    }\n  }, {\n    key: 'detachAll',\n    value: function detachAll() {\n      var node = this._head;\n      if (!node) return this;\n\n      this._head = this._tail = null;\n\n      while (node) {\n        node._owner = null;\n        node = node._next;\n      }\n      return this;\n    }\n  }]);\n\n  return MiniSignal;\n})();\n\nMiniSignal.MiniSignalBinding = MiniSignalBinding;\n\nexports['default'] = MiniSignal;\nmodule.exports = exports['default'];\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/mini-signals/lib/mini-signals.js\n// module id = 2\n// module chunks = 0","/// <reference path=\"../../typings/index.d.ts\" />\n\n/**\n * The default class for managing a NodeList. This class creates the NodeList and adds and removes\n * nodes to/from the list as the entities and the components in the engine change.\n *\n * It uses the basic entity matching pattern of an entity system - entities are added to the list if\n * they contain components matching all the public properties of the node class.\n */\nimport {NodePool} from './NodePool';\nimport {LinkedList} from '../utils/LinkedList';\nimport {Engine} from './Engine';\nimport {Entity} from './Entity';\nimport {IFamily} from './IFamily';\nimport {Dictionary} from '../utils/Dictionary';\n\nexport class ComponentsFamily implements IFamily {\n    private _nodes:LinkedList;\n    private _entities:Dictionary;\n    private _nodeClass;\n    private _components:Dictionary;\n    private _nodePool:NodePool;\n    private _engine:Engine;\n\n    /**\n     * The constructor. Creates a ComponentsFamily to provide a NodeList for the\n     * given node class.\n     *\n     * @param nodeClass The type of node to create and manage a NodeList for.\n     * @param engine The engine that this family is managing teh NodeList for.\n     */\n    constructor(nodeClass:any, engine:Engine) {\n        this._nodeClass = nodeClass;\n        this._engine = engine;\n\n        this._init();\n    }\n\n    /**\n     * Initialises the class. Creates the nodelist and other tools. Analyses the node to determine\n     * what component types the node requires.\n     */\n    private _init() {\n        this._nodes = new LinkedList();\n        this._entities = new Dictionary();   // <Entity, Node>\n        this._components = new Dictionary(); // <Type, string>\n\n        let types = this._nodeClass['types'];\n\n        for(let prop in types) {\n            if (types.hasOwnProperty(prop)) {\n                this._components.add(prop, types[prop]);\n            }\n        }\n        this._nodePool = new NodePool(this._nodeClass, this._components);\n        this._nodePool.dispose(this._nodePool.get());\n    }\n\n    /**\n     * The nodelist managed by this family. This is a reference that remains valid always\n     * since it is retained and reused by Systems that use the list. i.e. we never recreate the list,\n     * we always modify it in place.\n     */\n    public get nodeList():LinkedList {\n        return this._nodes;\n    }\n\n    /**\n     * Called by the engine when an entity has been added to it. We check if the entity should be in\n     * this family's NodeList and add it if appropriate.\n     */\n    public newEntity(entity:Entity) {\n        this.addIfMatch(entity);\n    }\n\n    /**\n     * Called by the engine when a component has been added to an entity. We check if the entity is not in\n     * this family's NodeList and should be, and add it if appropriate.\n     */\n    public componentAddedToEntity(entity:Entity, componentClass:() => any) {\n        this.addIfMatch(entity);\n    }\n\n    /**\n     * Called by the engine when a component has been removed from an entity. We check if the removed component\n     * is required by this family's NodeList and if so, we check if the entity is in this this NodeList and\n     * remove it if so.\n     */\n    public componentRemovedFromEntity(entity:Entity, componentClass:() => any) {\n        this.removeIfMatch(entity);\n    }\n\n    /**\n     * Called by the engine when an entity has been rmoved from it. We check if the entity is in\n     * this family's NodeList and remove it if so.\n     */\n    public removeEntity(entity:Entity) {\n        this.removeIfMatch(entity);\n    }\n\n    /**\n     * If the entity is not in this family's NodeList, tests the components of the entity to see\n     * if it should be in this NodeList and adds it if so.\n     */\n    public addIfMatch(entity:Entity) {\n        if (!this._entities.has(entity)) {\n\n            this._components.forEach((componentClass) => {\n                if (!entity.hasComponent(componentClass)) {\n                    return;\n                }\n            });\n            // If the entity has not components, don't add it.\n            if(entity.getAll().length > 0) {\n                let node = this._nodePool.get();\n                let types = node.types;\n\n                for(let prop in types) {\n                    if (types.hasOwnProperty(prop)) {\n\n                        if(!entity.hasComponent(types[prop].name)) {\n                            // Node prop was not found in the entity\n                            return;\n                        } else {\n                            // Add entity value to node\n                            node[prop] = entity.getComponent(types[prop].name);\n                        }\n                    }\n                }\n                node.entity = entity;\n\n                this._entities.add(entity, node);\n                this._nodes.add(node);\n            }\n        }\n    }\n\n    /**\n     * Removes the entity if it is in this family's NodeList.\n     */\n    public removeIfMatch(entity:Entity) {\n\n        if(this._entities.getValue(entity)) {\n            var node = this._entities.getValue(entity);\n            this._entities.remove(entity);\n\n            for(let i = 0; i < this._nodes.size(); i++) {\n                if(this._nodes.item(i) === node) {\n                    this._nodes.remove(i);\n                }\n            }\n\n            if (this._engine.updating) {\n                this._nodePool.cache(node);\n                this._engine.updateComplete.add(this._releaseNodePoolCache, this);\n            } else {\n                this._nodePool.dispose(node);\n            }\n        }\n    }\n\n    /**\n     * Releases the nodes that were added to the node pool during this engine update, so they can\n     * be reused.\n     */\n    private _releaseNodePoolCache() {\n        this._engine.updateComplete.detachAll();\n        this._nodePool.releaseCache();\n    }\n\n    /**\n     * Removes all nodes from the NodeList.\n     */\n    public cleanUp() {\n        for (let i = 0; i < this._nodes.size(); i++) {\n            this._entities.remove(this._nodes.item(i).entity);\n            this._nodes.remove(i);\n        }\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/core/ComponentsFamily.ts","/// <reference path=\"../../typings/index.d.ts\" />\n\n/**\n * This export class maintains a pool of deleted nodes for reuse by the framework. This reduces the overhead\n * from object creation and garbage collection.\n *\n * Because nodes may be deleted from a NodeList while in use, by deleting Nodes from a NodeList\n * while iterating through the NodeList, the pool also maintains a cache of nodes that are added to the pool\n * but should not be reused yet. They are then released into the pool by calling the releaseCache method.\n */\nimport {Dictionary} from '../utils/Dictionary';\n\nexport class NodePool {\n    private _tail:any;\n    private _nodeClass;\n    private _cacheTail:any;\n    private _components:Dictionary;\n\n    /**\n     * Creates a pool for the given node class.\n     */\n    constructor(nodeClass, components:Dictionary) {\n        this._nodeClass = nodeClass;\n        this._components = components;\n    }\n\n    /**\n     * Fetches a node from the pool.\n     */\n    public get() {\n        if(this._tail) {\n            var node = this._tail;\n            this._tail = this._tail.previous;\n            node.previous = null;\n            return node;\n        } else {\n            return Object.create(this._nodeClass);\n        }\n    }\n\n    /**\n     * Adds a node to the pool.\n     */\n    public dispose(node:any):void {\n        node.entity = null;\n        node.next = null;\n        node.previous = this._tail;\n        this._tail = node;\n    }\n\n    /**\n     * Adds a node to the cache\n     */\n    public cache(node):void {\n        node.previous = this._cacheTail;\n        this._cacheTail = node;\n    }\n\n    /**\n     * Releases all nodes from the cache into the pool\n     */\n    public releaseCache():void {\n        while(this._cacheTail) {\n            var node:any = this._cacheTail;\n            this._cacheTail = node.previous;\n            this.dispose(node);\n        }\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/core/NodePool.ts","/**\n * @author       Stefan Herndlbauer <sherndlbauer@gorillabyte.com>\n * @copyright    2015-2018 Stefan Herndlbauer\n * @license      {@link https://github.com/Herndl/silverback.git/blob/master/README.md|MIT License}\n **/\n\n// Utility libraries\nexport * from './utils/Dictionary';\nexport * from './utils/LinkedList';\n\n// Core components of the engine\nexport * from './core/Engine';\nexport * from './core/Entity';\nexport * from './core/System';\nexport * from './core/Node';\nexport * from './core/NodePool';\nexport * from './core/Scene';\nexport * from './core/ComponentsFamily';\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslib/tslib.es6.js\n// module id = 6\n// module chunks = 0","/**\n * @module Silverback\n * @class Engine\n */\n\n/// <reference path=\"../../typings/index.d.ts\" />\n\nimport {Entity} from './Entity';\nimport {Scene} from './Scene';\nimport {Dictionary} from '../utils/Dictionary';\nimport {LinkedList} from '../utils/LinkedList';\nimport systemSort from '../utils/SystemSort';\nimport {System} from './System';\nimport {ComponentsFamily} from './ComponentsFamily';\nimport {IFamily} from './IFamily';\n\nconst MiniSignal = require('mini-signals');\n\n/**\n * The Engine class is the central point for creating and managing your game state. Add\n * entities and systems to the engine, and fetch families of nodes from the engine.\n */\nexport class Engine {\n\n    private _systemList:Array<System>;\n    private _entityList:LinkedList;\n    private _sceneList:LinkedList;\n    private _entityNames:Dictionary;\n    private _sceneNames:Dictionary;\n    private _families:Dictionary;\n\n    /**\n     * Indicates if the engine is currently in its update loop.\n     */\n    public updating:boolean = false;\n\n    /**\n     * Dispatched when the update loop ends. If you want to add and remove systems from the\n     * engine it is usually best not to do so during the update loop. To avoid this you can\n     * listen for this signal and make the change when the signal is dispatched.\n     */\n    public updateComplete:MiniSignal;\n\n    /**\n     * The class used to manage node lists. In most cases the default class is sufficient\n     * but it is exposed here so advanced developers can choose to create and use a\n     * different implementation.\n     *\n     * The class must implement the Family interface.\n     */\n    public familyClass = null;\n\n    constructor() {\n        this._systemList = [];\n        this._entityList = new LinkedList();\n        this._sceneList = new LinkedList();\n        this._entityNames = new Dictionary();\n        this._sceneNames = new Dictionary();\n        this._families = new Dictionary();\n        this.updateComplete = new MiniSignal();\n\n        this.familyClass = ComponentsFamily;\n    }\n\n    /**\n     * Returns an array containing all the entities in the engine.\n     */\n    public get entities():Array<Entity> {\n        return this._entityList.toArray();\n    }\n\n    /**\n     * Returns an array containing all the scenes in the engine.\n     */\n    public get scenes():Array<Scene> {\n        return this._sceneList.toArray();\n    }\n\n    /**\n     * Returns an array containing all the systems in the engine.\n     */\n    public get systems():Array<System> {\n        return this._systemList;\n    }\n\n    /**\n     * Add an entity to the engine.\n     *\n     * @param entity The entity to add.\n     */\n    public addEntity(entity:Entity):void {\n        if(this._entityNames.has(entity.name)) {\n            throw new Error('The entity name ' + entity.name + ' is already in use by another entity.');\n        }\n        this._entityList.add(entity);\n        this._entityNames.add(entity.name, entity);\n        entity.componentAdded.add(this._componentAdded, this);\n        entity.componentRemoved.add(this._componentRemoved, this);\n        entity.nameChanged.add(this._entityNameChanged, this);\n\n        this._families.forEach((nodeObject, family:IFamily) => {\n            family.newEntity(entity);\n        });\n    }\n\n    /**\n     * Remove an entity from the engine.\n     *\n     * @param entity The entity to remove.\n     * @param index The index of the entity list.\n     */\n    public removeEntity(entity: Entity, index?:number):void {\n        entity.componentAdded.detachAll();\n        entity.componentRemoved.detachAll();\n        entity.nameChanged.detachAll();\n\n        if(typeof index === 'undefined') {\n            for (let i = 0; i < this._entityList.size(); i++) {\n                if(this._entityList.item(i) === entity) {\n                    this._entityList.remove(i);\n                    this._entityNames.remove(entity.name);\n                }\n            }\n        } else {\n            this._entityList.remove(index);\n            this._entityNames.remove(entity.name);\n        }\n        this._families.forEach((nodeObject, family: IFamily) => {\n            family.removeEntity(entity);\n        });\n    }\n\n    /**\n     * Get an entity based on its name.\n     *\n     * @param name The name of the entity\n     * @return The entity, or null if no entity with that name exists on the engine\n     */\n    public getEntityByName(name:string):Entity {\n        if(this._entityNames.has(name)) {\n            return this._entityNames.getValue(name);\n        }\n        return null;\n    }\n\n    /**\n     * Remove all entities from the engine.\n     */\n    public removeAllEntities():void {\n        let listSize = this._entityList.size() - 1;\n        for (let i = listSize; i >= 0; i--) {\n            this.removeEntity(this._entityList.item(i), i);\n        }\n    }\n\n    /**\n     * Add an scene to the engine.\n     *\n     * @param scene The scene to add.\n     */\n    public addScene(scene:Scene):void {\n        this._sceneList.add(scene);\n        this._sceneNames.add(scene.name, scene);\n        scene.nameChanged.add(this._sceneNameChanged, this);\n\n    }\n\n    /**\n     * Remove an scene from the engine.\n     *\n     * @param scene The scene to remove.\n     * @param index The scene index in the sceneList\n     */\n    public removeScene(scene:Scene, index?:number):void {\n        if(typeof index === 'undefined') {\n            for (let i = 0; i < this._sceneList.size(); i++) {\n                if(this._sceneList.item(i) === scene) {\n                    this._sceneList.remove(i);\n                }\n            }\n        } else {\n            this._sceneList.remove(index);\n        }\n        this._sceneNames.remove(scene.name);\n        scene.nameChanged.detachAll();\n    }\n\n    /**\n     * Remove all scenes from the engine.\n     */\n    public removeAllScenes():void {\n        let listSize = this._sceneList.size() - 1;\n        for (let i = listSize; i >= 0; i--) {\n            this.removeScene(this._sceneList.item(i), i);\n        }\n    }\n\n    /**\n     * Get an scene based on its name.\n     *\n     * @param name The name of the scene\n     * @return The scene, or null if no scene with that name exists on the engine\n     */\n    public getSceneByName(name:string):Scene {\n        if(this._sceneNames.has(name)) {\n            return this._sceneNames.getValue(name);\n        }\n        return null;\n    }\n\n    /**\n     * Get the scene instance of a particular type from within the engine.\n     *\n     * @param type The type of scene\n     * @return The instance of the scene type that is in the engine, or\n     * null if no scene of this type are in the engine.\n     */\n    public getScene(type):Scene {\n        return this._sceneList.get(type);\n    }\n\n    /**\n     * Get a collection of nodes from the engine, based on the type of the node required.\n     *\n     * <p>The engine will create the appropriate NodeList if it doesn't already exist and\n     * will keep its contents up to date as entities are added to and removed from the\n     * engine.</p>\n     *\n     * <p>If a NodeList is no longer required, release it with the releaseNodeList method.</p>\n     *\n     * @param nodeClass The type of node required.\n     * @return A linked list of all nodes of this type from all entities in the engine.\n     */\n    public getNodeList(nodeClass):LinkedList {\n        if(this._families.has(nodeClass)) {\n            return this._families.getValue(nodeClass).nodeList;\n        } else {\n            let family:IFamily = new this.familyClass(nodeClass, this);\n            this._families.add(nodeClass, family);\n            for (let i = 0; i < this._entityList.size(); i++) {\n                family.newEntity(this._entityList.item(i));\n            }\n            return family.nodeList;\n        }\n    }\n\n    /**\n     * If a NodeList is no longer required, this method will stop the engine updating\n     * the list and will release all references to the list within the framework\n     * classes, enabling it to be garbage collected.\n     *\n     * <p>It is not essential to release a list, but releasing it will free\n     * up memory and processor resources.</p>\n     *\n     * @param nodeClass The type of the node class if the list to be released.\n     */\n    public releaseNodeList(nodeClass) {\n        if(this._families.has(nodeClass)) {\n            this._families.getValue(nodeClass).cleanUp();\n        } else {\n            throw new Error('The given nodeClass was not found and can not be released.');\n        }\n        this._families.remove(nodeClass);\n    }\n\n    /**\n     * Add a system to the engine, and set its priority for the order in which the\n     * systems are updated by the engine update loop.\n     *\n     * <p>The priority dictates the order in which the systems are updated by the engine update\n     * loop. Lower numbers for priority are updated first. i.e. a priority of 1 is\n     * updated before a priority of 2.</p>\n     *\n     * @param system The system to add to the engine.\n     * @param priority The priority for updating the systems during the engine loop. A\n     * lower number means the system is updated sooner.\n     */\n    public addSystem(system:System, priority?:number) {\n        system.priority = priority | 0;\n        system.addToEngine(this);\n        this._systemList.push(system);\n        this._systemList = systemSort(this._systemList);\n    }\n\n    /**\n     * Get the system instance of a particular type from within the engine.\n     *\n     * @param type The type of system\n     * @return The instance of the system type that is in the engine, or\n     * null if no systems of this type are in the engine.\n     */\n    public getSystem(type):System {\n        for (let i = 0, len = this._systemList.length; i < len; i++) {\n            if(this._systemList[i].is(type)) {\n                return this._systemList[i];\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Remove a system from the engine.\n     *\n     * @param system The system to remove from the engine.\n     * @param index The system index in the system list.\n     */\n    public removeSystem(system:System, index?:number) {\n        if(typeof index === 'undefined') {\n            for (let i = 0, len = this._systemList.length; i < len; i++) {\n                if(this._systemList[i] === system) {\n                    this._systemList.splice(i, 1);\n                }\n            }\n        } else {\n            this._systemList.splice(index - 1, 1);\n        }\n        system.removeFromEngine(this);\n    }\n\n    /**\n     * Remove all systems from the engine.\n     */\n    public removeAllSystems():void {\n        for (let i = this._systemList.length - 1; i >= 0; i--) {\n            this.removeSystem(this._systemList[i], i);\n        }\n        return;\n    }\n\n    /**\n     * Update the engine. This causes the engine update loop to run, calling update on all the\n     * systems in the engine.\n     *\n     * @time The duration, in seconds, of this update step.\n     */\n    public update(time:number):void {\n        this.updating = true;\n        for (let i = 0, len = this._systemList.length; i < len; i++) {\n            this._systemList[i].update(time);\n        }\n        this.updating = false;\n        this.updateComplete.dispatch();\n    }\n\n    /**\n     * @private\n     */\n    private _entityNameChanged(entity:Entity, oldName:string):void {\n        if(this._entityNames.has(oldName)) {\n            this._entityNames.remove(oldName);\n            this._entityNames.add(entity.name, entity);\n        } else {\n            throw new Error('The given name was not found in the entity list.');\n        }\n    }\n\n    /**\n     * @private\n     */\n    private _sceneNameChanged(scene:Scene, oldName:string):void {\n        if(this._sceneNames.has(oldName)) {\n            this._sceneNames.remove(oldName);\n            this._sceneNames.add(scene.name, scene);\n        } else {\n            throw new Error('The given name was not found in the scene list.');\n        }\n    }\n\n    /**\n     * @private\n     */\n    private _componentAdded(entity:Entity, componentClass:() => any):void {\n        this._families.forEach((nodeObject, family:IFamily) => {\n                family.componentAddedToEntity(entity, componentClass);\n            }\n        );\n    }\n\n    /**\n     * @private\n     */\n    private _componentRemoved(entity:Entity, componentClass:() => any):void {\n        this._families.forEach((nodeObject, family:IFamily) => {\n                family.componentRemovedFromEntity(entity, componentClass);\n            }\n        );\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/core/Engine.ts","/*\n * Insertion sort implementation in JavaScript\n * Copyright (c) 2012 Nicholas C. Zakas\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of items software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and items permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * Swaps two values in an array.\n * @param {Array} items The array containing the items.\n * @param {int} firstIndex Index of first item to swap.\n * @param {int} secondIndex Index of second item to swap.\n * @return {void}\n */\nfunction swap(items, firstIndex:number, secondIndex:number):void {\n    let temp = items[firstIndex];\n    items[firstIndex] = items[secondIndex];\n    items[secondIndex] = temp;\n}\n\nfunction partition(items, left:number, right:number) {\n    let pivot = items[Math.floor((right + left) / 2)].priority;  // pivot value is middle item\n    let i = left;     // starts from left and goes right to pivot index\n    let j = right;    // starts from right and goes left to pivot index\n\n    // while the two indices don't match\n    while (i <= j) {\n\n        // if the item on the left is less than the pivot, continue right\n        while (items[i].priority < pivot) {\n            i++;\n        }\n\n        // if the item on the right is greater than the pivot, continue left\n        while (items[j].priority > pivot) {\n            j--;\n        }\n\n        // if the two indices still don't match, swap the values\n        if (i <= j) {\n            swap(items, i, j);\n\n            // change indices to continue loop\n            i++;\n            j--;\n        }\n    }\n    // this value is necessary for recursion\n    return i;\n}\n\n/**\n * A quicksort implementation in JavaScript. The array is sorted in place.\n * @param {Array} items An array of items to sort.\n * @return {Array} The sorted array.\n */\nexport default function systemSort(items, left?, right?) {\n    let index;\n\n    // performance - don't sort an array with zero or one items\n    if (items.length > 1) {\n\n        // fix left and right values - might not be provided\n        left = typeof left !== 'number' ? 0 : left;\n        right = typeof right !== 'number' ? items.length - 1 : right;\n\n        // split up the entire array\n        index = partition(items, left, right);\n\n        // if the returned index\n        if (left < index - 1) {\n            systemSort(items, left, index - 1);\n        }\n\n        if (index < right) {\n            systemSort(items, index, right);\n        }\n    }\n    return items;\n}\n\n\n// WEBPACK FOOTER //\n// ./src/utils/SystemSort.ts","/// <reference path=\"../../typings/index.d.ts\" />\n\n/**\n * An entity is composed from components. As such, it is essentially a collection object for components.\n * Sometimes, the entities in a game will mirror the actual characters and objects in the game, but this\n * is not necessary.\n *\n * <p>Components are simple value objects that contain data relevant to the entity. Entities\n * with similar functionality will have instances of the same components. So we might have\n * a position component</p>\n *\n * <p><code>export class PositionComponent\n * {\n *   public x :number;\n *   public y :number;\n * }</code></p>\n *\n * <p>All entities that have a position in the game world, will have an instance of the\n * position component. Systems operate on entities based on the components they have.</p>\n */\n\nimport {Scene} from './Scene';\nimport {Dictionary} from '../utils/Dictionary';\nconst MiniSignal = require('mini-signals');\n\nexport class Entity {\n\n    private static nameCount = 0;\n    /**\n     * Optional, give the entity a name. This can help with debugging and with serialising the entity.\n     */\n    private _name:string;\n\n    /**\n     * This signal is dispatched when a component is added to the entity.\n     */\n    public componentAdded;\n\n    /**\n     * This signal is dispatched when a component is removed from the entity.\n     */\n    public componentRemoved;\n\n    /**\n     * Dispatched when the name of the entity changes.\n     * Used internally by the engine to track entities based on their names.\n     */\n    public nameChanged;\n\n    public previous:Entity;\n    public next:Entity;\n    private _components:Dictionary;\n    private _addedToScene:Scene;\n\n    constructor(name:string = '') {\n        this._components = new Dictionary();\n        this.componentAdded = new MiniSignal();\n        this.componentRemoved = new MiniSignal();\n        this.nameChanged = new MiniSignal();\n\n        if(name.length > 0) {\n            this._name = name;\n        } else {\n            this._name = 'entity' + (++Entity.nameCount);\n        }\n    }\n\n    /**\n     * All entities have a name. If no name is set, a default name is used. Names are used to\n     * fetch specific entities from the engine, and can also help to identify an entity when debugging.\n     */\n    public get name():string {\n        return this._name;\n    }\n    public set name(value:string) {\n        if(this._name !== value) {\n            var previous:string = this._name;\n            this._name = value;\n            this.nameChanged.dispatch(this, previous);\n        }\n    }\n\n    /**\n     * Add a component to the entity.\n     *\n     * @param component The component object to add.\n     * @param componentClass The class of the component. This is only necessary if the component\n     * extends another component class and you want the framework to treat the component as of\n     * the base class type. If not set, the class type is determined directly from the component.\n     *\n     * @return A reference to the entity. This enables the chaining of calls to add, to make\n     * creating and configuring entities cleaner. e.g.\n     *\n     * <code>var entity : Entity = new Entity()\n     *     .add(new Position(100, 200))\n     *     .add(new Display(new PlayerClip());</code>\n     */\n    public addComponent(component:any, componentClass?):Entity {\n        if(typeof componentClass === 'undefined') {\n            componentClass = component.constructor.name;\n        }\n        if(this._components.has(componentClass)) {\n            this.removeComponent(componentClass);\n        }\n        this._components.add(componentClass, component);\n        this.componentAdded.dispatch(this, componentClass);\n        return this;\n    }\n\n    /**\n     * Remove a component from the entity.\n     *\n     * @param componentClass The class of the component to be removed.\n     * @return the component, or null if the component doesn't exist in the entity\n     */\n    public removeComponent(componentClass):any {\n        let component:any = this._components.getValue(componentClass);\n        if (component) {\n            this._components.remove(componentClass);\n            this.componentRemoved.dispatch(this, componentClass);\n            return component;\n        }\n        return null;\n    }\n\n    /**\n     * Get a component from the entity.\n     *\n     * @param componentClass The class of the component requested.\n     * @return The component, or null if none was found.\n     */\n    public getComponent(componentClass:string):any {\n        return this._components.getValue(componentClass);\n    }\n\n    /**\n     * Does the entity have a component of a particular type.\n     *\n     * @param componentClass The class of the component sought.\n     * @return true if the entity has a component of the type, false if not.\n     */\n    public hasComponent(componentClass:string):boolean {\n        return this._components.has(componentClass);\n    }\n\n    /**\n     * Get all components from the entity.\n     *\n     * @return An array containing all the components that are on the entity.\n     */\n    public getAll():any[] {\n        let componentArray = [];\n\n        this._components.forEach(\n            (componentClass, component) => {\n                componentArray.push(component);\n            }\n        );\n        return componentArray;\n    }\n\n    public set scene(scene:Scene) {\n        this._addedToScene = scene;\n    }\n\n    public toString() {\n        let seen = [];\n        return JSON.stringify(this, function(key, val) {\n            if (typeof val === 'object') {\n                if (seen.indexOf(val) >= 0) {\n                    return;\n                }\n                seen.push(val);\n            }\n            return val;\n        }, 4);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/core/Entity.ts","/// <reference path=\"../../typings/index.d.ts\" />\n\n/**\n * The abstract class for a system implementation.\n *\n * <p>A system is part of the core functionality of the game. After a system is added to the engine, its\n * update method will be called on every frame of the engine. When the system is removed from the engine,\n * the update method is no longer called.</p>\n *\n * <p>The aggregate of all systems in the engine is the functionality of the game, with the update\n * methods of those systems collectively constituting the engine update loop. Systems generally operate on\n * node lists - collections of nodes. Each node contains the components from an entity in the engine\n * that match the node.</p>\n */\nexport abstract class System {\n\n    /**\n     * Used internally to manage the list of systems within the engine. The previous system in the list.\n     */\n    public previous:System = null;\n\n    /**\n     * Used internally to manage the list of systems within the engine. The next system in the list.\n     */\n    public next:System = null;\n\n    /**\n     * Used internally to hold the priority of this system within the system list. This is\n     * used to order the systems so they are updated in the correct order.\n     */\n    public priority:number = 0;\n\n    /**\n     * Called just after the system is added to the engine, before any calls to the update method.\n     * Override this method to add your own functionality.\n     *\n     * @param engine The engine the system was added to.\n     */\n    public addToEngine(engine:any):void {\n        throw new Error('Don\\'t call the abstract class directly, this method must be overridden.');\n    }\n\n    /**\n     * Called just after the system is removed from the engine, after all calls to the update method.\n     * Override this method to add your own functionality.\n     *\n     * @param engine The engine the system was removed from.\n     */\n    public removeFromEngine(engine:any):void {\n        throw new Error('Don\\'t call the abstract class directly, this method must be overridden.');\n    }\n\n    /**\n     * After the system is added to the engine, this method is called every frame until the system\n     * is removed from the engine. Override this method to add your own functionality.\n     *\n     * <p>If you need to perform an action outside of the update loop (e.g. you need to change the\n     * systems in the engine and you don't want to do it while they're updating) add a listener to\n     * the engine's updateComplete signal to be notified when the update loop completes.</p>\n     *\n     * @param time The duration, in seconds, of the frame.\n     */\n    public update(time:number) {\n        throw new Error('Don\\'t call the abstract class directly, this method must be overridden.');\n    }\n\n    public is(type) {\n        return type.prototype.isPrototypeOf(this);\n    }\n}\n\nSystem.prototype.previous = null;\nSystem.prototype.next = null;\nSystem.prototype.priority = 0;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/System.ts","/// <reference path=\"../../typings/index.d.ts\" />\n\n/**\n * The base class for a node.\n *\n * <p>A node is a set of different components that are required by a system.\n * A system can request a collection of nodes from the engine. Subsequently the Engine object creates\n * a node for every entity that has all of the components in the node class and adds these nodes\n * to the list obtained by the system. The engine keeps the list up to date as entities are added\n * to and removed from the engine and as the components on entities change.</p>\n */\n\nexport class Node {\n    /**\n     * The entity whose components are included in the node.\n     */\n    public entity:any = null;\n\n    /**\n     * Used by the NodeList class. The previous node in a node list.\n     */\n    public previous:any = null;\n\n    /**\n     * Used by the NodeList class. The next node in a node list.\n     */\n    public next:any = null;\n}\n\n\n// WEBPACK FOOTER //\n// ./src/core/Node.ts","/// <reference path=\"../../typings/index.d.ts\" />\n\nimport {LinkedList} from '../utils/LinkedList';\nimport {Dictionary} from '../utils/Dictionary';\nimport {Entity} from './Entity';\nconst MiniSignal = require('mini-signals');\n\nexport class Scene {\n\n    private static nameCount = 0;\n    /**\n     * Optional, give the scene a name. This can help with debugging and with serialising the scenes.\n     */\n    private _name:string;\n\n    /**\n     * This signal is dispatched when a entity is added to the scene.\n     */\n    public entityAdded;\n\n    /**\n     * This signal is dispatched when a entity is removed from the scene.\n     */\n    public entityRemoved;\n\n    /**\n     * Dispatched when the name of the scene changes.\n     * Used internally by the engine to track entities based on their names.\n     */\n    public nameChanged;\n\n    public previous:Scene;\n    public next:Scene;\n\n    private _entities:Dictionary;\n    private _entityList:LinkedList;\n    private _entityNames:Dictionary;\n\n    constructor(name:string = '') {\n        this._entities = new Dictionary();\n        this.entityAdded = new MiniSignal();\n        this.entityRemoved = new MiniSignal();\n        this._entityList = new LinkedList();\n        this._entityNames = new Dictionary();\n        this.nameChanged = new MiniSignal();\n\n        if (name) {\n            this._name = name;\n        } else {\n            this._name = '_scene' + (++Scene.nameCount);\n        }\n    }\n\n    /**\n     * All scenes have a name. If no name is set, a default name is used. Names are used to\n     * fetch specific scenes from the engine, and can also help to identify an entity when debugging.\n     */\n    public get name():string {\n        return this._name;\n    }\n    public set name(value:string) {\n        if(this._name !== value) {\n            var previous:string = this._name;\n            this._name = value;\n            this.nameChanged.dispatch(this, previous);\n        }\n    }\n\n    /**\n     * Add a entity to the scene.\n     *\n     * @param entity The entity object to add.\n     * @param entityClass The class of the entity. This is only necessary if the entity\n     * extends another entity class and you want the framework to treat the entity as of\n     * the base class type. If not set, the class type is determined directly from the entity.\n     *\n     * @return A reference to the scene. This enables the chaining of calls to add, to make\n     * creating and configuring entities cleaner. e.g.\n     *\n     */\n    public addEntity(entity:any, entityClass?):Scene {\n        if (typeof entityClass === 'undefined') {\n            entityClass = entity.constructor;\n        }\n        this._entityList.add(entity);\n        this._entityNames.add(entity.name, entity);\n        this.entityAdded.dispatch(this, entityClass);\n        entity.scene = this;\n        return this;\n    }\n\n    /**\n     * Remove a entity from the scene.\n     *\n     * @param entity The entity to be removed.\n     * @param index The index of the entity in the entityList.\n     */\n    public removeEntity(entity:Entity, index?:number):void {\n        if(typeof index === 'undefined') {\n            for (let i = 0; i < this._entityList.size(); i++) {\n                if(this._entityList.item(i) === entity) {\n                    this._entityList.remove(i);\n                }\n            }\n        } else {\n            this._entityList.remove(index);\n        }\n    }\n\n    /**\n     * Get a entity from the scene.\n     *\n     * @param entityName The class of the entity requested.\n     * @return The entity, or null if none was found.\n     */\n    public getEntityWithName(entityName:any):Entity {\n        for (let i = 0; i < this._entityList.size(); i++) {\n            if (this._entityList.item(i).name === entityName) {\n                return this._entityList.item(i);\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Get all entities from the scene.\n     *\n     * @return An array containing all the entities that are on the scene.\n     */\n    public getAllEntities():any[] {\n        return this._entityList.toArray();\n    }\n\n    /**\n     * Does the entity have a entity of a particular type.\n     *\n     * @param entityName The class of the entity sought.\n     * @return true if the entity has a entity of the type, false if not.\n     */\n    public hasEntityWithName(entityName:any):boolean {\n        for (let i = 0, len = this._entityList.size(); i < len; i++) {\n            if(this._entityList.item(i).name === entityName) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Checks the type, if the prototype is matching.\n     *\n     * @return {boolean} Return if the prototypes match.\n     */\n    public is(type):boolean {\n        return type.prototype.isPrototypeOf(this);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/core/Scene.ts"],"sourceRoot":""}