/**
 * Silverback Game Engine v.0.0.5 - The Silverback Engine is typescript entity game framework.
 * Copyright (c) 2015 Gorillabyte
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Visit http://www.silverbackengine.org for documentation, updates and examples.
 */
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var NodePool_1 = require('./NodePool');
var NodeList_1 = require('./NodeList');
var Dictionary_1 = require('../utils/Dictionary');
var ComponentMatchingFamily = (function () {
    function ComponentMatchingFamily(nodeClass, engine) {
        this._nodeClass = nodeClass;
        this._engine = engine;
        this._nodes = new NodeList_1.NodeList();
        this._entities = new Dictionary_1.Dictionary();
        this._components = new Dictionary_1.Dictionary();
        var nodeClassPrototype = this._nodeClass.prototype;
        for (var property in nodeClassPrototype) {
            if (nodeClassPrototype.hasOwnProperty(property) &&
                property !== 'types' &&
                property !== 'next' &&
                property !== 'previous' &&
                property !== 'constructor' &&
                property !== 'super' &&
                property !== 'extend' &&
                property !== 'entity') {
                var componentObject = nodeClassPrototype.types[property];
                this._components.add(componentObject, property);
            }
        }
        this._nodePool = new NodePool_1.NodePool(this._nodeClass, this._components);
        this._nodePool.dispose(this._nodePool.get());
    }
    Object.defineProperty(ComponentMatchingFamily.prototype, "nodeList", {
        get: function () {
            return this._nodes;
        },
        enumerable: true,
        configurable: true
    });
    ComponentMatchingFamily.prototype.newEntity = function (entity) {
        this.addIfMatch(entity);
    };
    ComponentMatchingFamily.prototype.componentAddedToEntity = function (entity, componentClass) {
        this.addIfMatch(entity);
    };
    ComponentMatchingFamily.prototype.componentRemovedFromEntity = function (entity, componentClass) {
        if (this._components.has(componentClass)) {
            this.removeIfMatch(entity);
        }
    };
    ComponentMatchingFamily.prototype.removeEntity = function (entity) {
        this.removeIfMatch(entity);
    };
    ComponentMatchingFamily.prototype.addIfMatch = function (entity) {
        if (!this._entities.has(entity)) {
            var componentClass;
            if (!this._components.forEach(function (componentClass, componentName) {
                if (!entity.has(componentClass)) {
                    return 'return';
                }
            })) {
                return;
            }
            var node = this._nodePool.get();
            node.entity = entity;
            this._components.forEach(function (componentClass, componentName) {
                node[componentName] = entity.get(componentClass);
            });
            this._entities.add(entity, node);
            entity.componentRemoved.add(this.componentRemovedFromEntity, this);
            this._nodes.add(node);
        }
    };
    ComponentMatchingFamily.prototype.removeIfMatch = function (entity) {
        if (this._entities.getValue(entity)) {
            var node = this._entities.getValue(entity);
            this._entities.remove(entity);
            this._nodes.remove(node);
            if (this._engine.updating) {
                this._nodePool.cache(node);
                this._engine.updateComplete.add(this._releaseNodePoolCache, this);
            }
            else {
                this._nodePool.dispose(node);
            }
        }
    };
    ComponentMatchingFamily.prototype._releaseNodePoolCache = function () {
        this._engine.updateComplete.remove(this._releaseNodePoolCache);
        this._nodePool.releaseCache();
    };
    ComponentMatchingFamily.prototype.cleanUp = function () {
        for (var node = this._nodes.head; node; node = node.next) {
            this._entities.remove(node.entity);
        }
        this._nodes.removeAll();
    };
    return ComponentMatchingFamily;
})();
exports.ComponentMatchingFamily = ComponentMatchingFamily;

},{"../utils/Dictionary":9,"./NodeList":4,"./NodePool":5}],2:[function(require,module,exports){
var EntityList_1 = require('./EntityList');
var SceneList_1 = require('./SceneList');
var SystemList_1 = require('./SystemList');
var Dictionary_1 = require('../utils/Dictionary');
var Signal_1 = require('../utils/Signal');
var ComponentMatchingFamily_1 = require('./ComponentMatchingFamily');
var Engine = (function () {
    function Engine() {
        this.familyClass = ComponentMatchingFamily_1.ComponentMatchingFamily;
        this._entityList = new EntityList_1.EntityList();
        this._sceneList = new SceneList_1.SceneList();
        this._systemList = new SystemList_1.SystemList();
        this._families = new Dictionary_1.Dictionary();
        this.updateComplete = new Signal_1.Signal();
    }
    Object.defineProperty(Engine.prototype, "entites", {
        get: function () {
            var tmpEntities = [];
            for (var entity = this._entityList.head; entity; entity = entity.next) {
                tmpEntities.push(entity);
            }
            return tmpEntities;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Engine.prototype, "scenes", {
        get: function () {
            var tmpScenes = [];
            for (var scene = this._sceneList.head; scene; scene = scene.next) {
                tmpScenes.push(scene);
            }
            return tmpScenes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Engine.prototype, "systems", {
        get: function () {
            var tmpSystems = [];
            for (var system = this._systemList.head; system; system = system.next) {
                tmpSystems.push(system);
            }
            return tmpSystems;
        },
        enumerable: true,
        configurable: true
    });
    Engine.prototype.addEntity = function (entity) {
        this._entityList.add(entity);
        entity.componentAdded.add(this._componentAdded, this);
        entity.componentRemoved.add(this._componentRemoved, this);
        this._families.forEach(function (nodeObject, family) {
            family.newEntity(entity);
        });
    };
    Engine.prototype.removeEntity = function (entity) {
        entity.componentAdded.remove(this._componentAdded, this);
        entity.componentRemoved.remove(this._componentRemoved, this);
        this._families.forEach(function (nodeObject, family) {
            family.removeEntity(entity);
        });
        this._entityList.remove(entity);
    };
    Engine.prototype.removeAllEntities = function () {
        while (this._entityList.head) {
            this.removeEntity(this._entityList.head);
        }
    };
    Engine.prototype.addScene = function (scene) {
        this._sceneList.add(scene);
    };
    Engine.prototype.removeScene = function (scene) {
        this._sceneList.remove(scene);
    };
    Engine.prototype.removeAllScenes = function () {
        while (this._sceneList.head) {
            this.removeScene(this._sceneList.head);
        }
    };
    Engine.prototype.getScene = function (type) {
        return this._sceneList.get(type);
    };
    Engine.prototype._componentAdded = function (entity, componentClass) {
        this._families.forEach(function (nodeObject, family) {
            family.componentAddedToEntity(entity, componentClass);
        });
    };
    Engine.prototype._componentRemoved = function (entity, componentClass) {
        this._families.forEach(function (nodeObject, family) {
            family.componentRemovedFromEntity(entity, componentClass);
        });
    };
    Engine.prototype.getNodeList = function (nodeClass) {
        if (this._families.has(nodeClass)) {
            return this._families.getValue(nodeClass)._nodes;
        }
        var family = new this.familyClass(nodeClass, this);
        this._families.add(nodeClass, family);
        for (var entity = this._entityList.head; entity; entity = entity.next) {
            family.newEntity(entity);
        }
        return family.nodeList;
    };
    Engine.prototype.releaseNodeList = function (nodeClass) {
        if (this._families.has(nodeClass)) {
            this._families.getValue(nodeClass).cleanUp();
        }
        this._families.remove(nodeClass);
    };
    Engine.prototype.addSystem = function (system, priority) {
        system.priority = priority;
        system.addToEngine(this);
        this._systemList.add(system);
    };
    Engine.prototype.getSystem = function (type) {
        return this._systemList.get(type);
    };
    Engine.prototype.removeSystem = function (system) {
        this._systemList.remove(system);
        system.removeFromEngine(this);
    };
    Engine.prototype.removeAllSystems = function () {
        while (this._systemList.head) {
            this.removeSystem(this._systemList.head);
        }
    };
    Engine.prototype.update = function (time) {
        this.updating = true;
        for (var system = this._systemList.head; system; system = system.next) {
            system.update(time);
        }
        this.updating = false;
        this.updateComplete.dispatch();
    };
    return Engine;
})();
exports.Engine = Engine;

},{"../utils/Dictionary":9,"../utils/Signal":10,"./ComponentMatchingFamily":1,"./EntityList":3,"./SceneList":6,"./SystemList":7}],3:[function(require,module,exports){
var EntityList = (function () {
    function EntityList() {
    }
    EntityList.prototype.add = function (entity) {
        if (!this.head) {
            this.head = this.tail = entity;
            entity.next = entity.previous = null;
        }
        else {
            this.tail.next = entity;
            entity.previous = this.tail;
            entity.next = null;
            this.tail = entity;
        }
    };
    EntityList.prototype.remove = function (entity) {
        if (this.head === entity) {
            this.head = this.head.next;
        }
        if (this.tail === entity) {
            this.tail = this.tail.previous;
        }
        if (entity.previous) {
            entity.previous.next = entity.next;
        }
        if (entity.next) {
            entity.next.previous = entity.previous;
        }
    };
    EntityList.prototype._removeAll = function () {
        while (this.head) {
            var entity = this.head;
            this.head = this.head.next;
            entity.previous = null;
            entity.next = null;
        }
        this.tail = null;
    };
    return EntityList;
})();
exports.EntityList = EntityList;

},{}],4:[function(require,module,exports){
var Signal_1 = require('../utils/Signal');
var NodeList = (function () {
    function NodeList() {
        this.head = null;
        this.tail = null;
        this.nodeAdded = new Signal_1.Signal();
        this.nodeRemoved = new Signal_1.Signal();
    }
    NodeList.prototype.add = function (node) {
        if (!this.head) {
            this.head = this.tail = node;
            node.next = node.previous = null;
        }
        else {
            this.tail.next = node;
            node.previous = this.tail;
            node.next = null;
            this.tail = node;
        }
        this.nodeAdded.dispatch(node);
    };
    NodeList.prototype.remove = function (node) {
        if (this.head === node) {
            this.head = this.head.next;
        }
        if (this.tail === node) {
            this.tail = this.tail.previous;
        }
        if (node.previous) {
            node.previous.next = node.next;
        }
        if (node.next) {
            node.next.previous = node.previous;
        }
        this.nodeRemoved.dispatch(node);
    };
    NodeList.prototype.removeAll = function () {
        while (this.head) {
            var node = this.head;
            this.head = node.next;
            node.previous = null;
            node.next = null;
            this.nodeRemoved.dispatch(node);
        }
        this.tail = null;
    };
    NodeList.prototype.empty = function () {
        return this.head === null;
    };
    NodeList.prototype.swap = function (node1, node2) {
        if (node1.previous === node2) {
            node1.previous = node2.previous;
            node2.previous = node1;
            node2.next = node1.next;
            node1.next = node2;
        }
        else if (node2.previous === node1) {
            node2.previous = node1.previous;
            node1.previous = node2;
            node1.next = node2.next;
            node2.next = node1;
        }
        else {
            var temp = node1.previous;
            node1.previous = node2.previous;
            node2.previous = temp;
            temp = node1.next;
            node1.next = node2.next;
            node2.next = temp;
        }
        if (this.head === node1) {
            this.head = node2;
        }
        else if (this.head === node2) {
            this.head = node1;
        }
        if (this.tail === node1) {
            this.tail = node2;
        }
        else if (this.tail === node2) {
            this.tail = node1;
        }
        if (node1.previous) {
            node1.previous.next = node1;
        }
        if (node2.previous) {
            node2.previous.next = node2;
        }
        if (node1.next) {
            node1.next.previous = node1;
        }
        if (node2.next) {
            node2.next.previous = node2;
        }
    };
    NodeList.prototype.insertionSort = function (sortFunction) {
        if (this.head === this.tail) {
            return;
        }
        var remains = this.head.next;
        for (var node = remains; node; node = remains) {
            remains = node.next;
            for (var other = node.previous; other; other = other.previous) {
                if (sortFunction(node, other) >= 0) {
                    if (node !== other.next) {
                        if (this.tail === node) {
                            this.tail = node.previous;
                        }
                        node.previous.next = node.next;
                        if (node.next) {
                            node.next.previous = node.previous;
                        }
                        node.next = other.next;
                        node.previous = other;
                        node.next.previous = node;
                        other.next = node;
                    }
                    break;
                }
            }
            if (!other) {
                if (this.tail === node) {
                    this.tail = node.previous;
                }
                node.previous.next = node.next;
                if (node.next) {
                    node.next.previous = node.previous;
                }
                node.next = this.head;
                this.head.previous = node;
                node.previous = null;
                this.head = node;
            }
        }
    };
    NodeList.prototype.mergeSort = function (sortFunction) {
        if (this.head === this.tail) {
            return;
        }
        var lists;
        var start = this.head;
        var end;
        while (start) {
            end = start;
            while (end.next && sortFunction(end, end.next) <= 0) {
                end = end.next;
            }
            var next = end.next;
            start.previous = end.next = null;
            lists.push(start);
            start = next;
        }
        while (lists.length > 1) {
        }
        this.tail = this.head = lists[0];
        while (this.tail.next) {
            this.tail = this.tail.next;
        }
    };
    NodeList.prototype._merge = function (head1, head2, sortFunction) {
        var node;
        var head;
        if (sortFunction(head1, head2) <= 0) {
            head = node = head1;
            head1 = head1.next;
        }
        else {
            head = node = head2;
            head2 = head2.next;
        }
        while (head1 && head2) {
            if (sortFunction(head1, head2) <= 0) {
                node.next = head1;
                head1.previous = node;
                node = head1;
                head1 = head1.next;
            }
            else {
                node.next = head2;
                head2.previous = node;
                node = head2;
                head2 = head2.next;
            }
        }
        if (head1) {
            node.next = head1;
            head1.previous = node;
        }
        else {
            node.next = head2;
            head2.previous = node;
        }
        return head;
    };
    return NodeList;
})();
exports.NodeList = NodeList;

},{"../utils/Signal":10}],5:[function(require,module,exports){
var NodePool = (function () {
    function NodePool(nodeClass, components) {
        this._nodeClass = nodeClass;
        this._components = components;
    }
    NodePool.prototype.get = function () {
        if (this._tail) {
            var node = this._tail;
            this._tail = this._tail.previous;
            node.previous = null;
            return node;
        }
        else {
            var newNode = new this._nodeClass;
            return newNode;
        }
    };
    NodePool.prototype.dispose = function (node) {
        this._components.forEach(function (componentClass, componentName) {
            node[componentName] = null;
        });
        node.entity = null;
        node.next = null;
        node.previous = this._tail;
        this._tail = node;
    };
    NodePool.prototype.cache = function (node) {
        node.previous = this._cacheTail;
        this._cacheTail = node;
    };
    NodePool.prototype.releaseCache = function () {
        while (this._cacheTail) {
            var node = this._cacheTail;
            this._cacheTail = node.previous;
            node.next = null;
            node.previous = this._tail;
            this._tail = node;
        }
    };
    return NodePool;
})();
exports.NodePool = NodePool;

},{}],6:[function(require,module,exports){
var SceneList = (function () {
    function SceneList() {
    }
    SceneList.prototype.add = function (scene) {
        if (!this.head) {
            this.head = this.tail = scene;
            scene.next = scene.previous = null;
        }
        else {
            this.tail.next = scene;
            scene.previous = this.tail;
            scene.next = null;
            this.tail = scene;
        }
    };
    SceneList.prototype.remove = function (scene) {
        if (this.head === scene) {
            this.head = this.head.next;
        }
        if (this.tail === scene) {
            this.tail = this.tail.previous;
        }
        if (scene.previous) {
            scene.previous.next = scene.next;
        }
        if (scene.next) {
            scene.next.previous = scene.previous;
        }
    };
    SceneList.prototype._removeAll = function () {
        while (this.head) {
            var scene = this.head;
            this.head = this.head.next;
            scene.previous = null;
            scene.next = null;
        }
        this.tail = null;
    };
    SceneList.prototype.get = function (type) {
        for (var scene = this.head; scene; scene = scene.next) {
            if (scene.is(type)) {
                return scene;
            }
        }
        return null;
    };
    return SceneList;
})();
exports.SceneList = SceneList;

},{}],7:[function(require,module,exports){
var SystemList = (function () {
    function SystemList() {
    }
    SystemList.prototype.add = function (system) {
        if (!this.head) {
            this.head = this.tail = system;
            system.next = system.previous = null;
        }
        else {
            for (var node = this.tail; node; node = node.previous) {
                if (node.priority <= system.priority) {
                    break;
                }
            }
            if (node === this.tail) {
                this.tail.next = system;
                system.previous = this.tail;
                system.next = null;
                this.tail = system;
            }
            else if (!node) {
                system.next = this.head;
                system.previous = null;
                this.head.previous = system;
                this.head = system;
            }
            else {
                system.next = node.next;
                system.previous = node;
                node.next.previous = system;
                node.next = system;
            }
        }
    };
    SystemList.prototype.remove = function (system) {
        if (this.head === system) {
            this.head = this.head.next;
        }
        if (this.tail === system) {
            this.tail = this.tail.previous;
        }
        if (system.previous) {
            system.previous.next = system.next;
        }
        if (system.next) {
            system.next.previous = system.previous;
        }
    };
    SystemList.prototype.removeAll = function () {
        while (this.head) {
            var system = this.head;
            this.head = this.head.next;
            system.previous = null;
            system.next = null;
        }
        this.tail = null;
    };
    SystemList.prototype.get = function (type) {
        for (var system = this.head; system; system = system.next) {
            if (system.is(type)) {
                return system;
            }
        }
        return null;
    };
    return SystemList;
})();
exports.SystemList = SystemList;

},{}],8:[function(require,module,exports){
var Engine_1 = require('./core/Engine');
exports.Engine = Engine_1.Engine;

},{"./core/Engine":2}],9:[function(require,module,exports){
var Dictionary = (function () {
    function Dictionary() {
        this._keys = [];
        this._values = [];
    }
    Dictionary.prototype.add = function (key, value) {
        var keyIndex = this.getIndex(key);
        if (keyIndex >= 0) {
            this._values[keyIndex] = value;
        }
        else {
            this._keys.push(key);
            this._values.push(value);
        }
    };
    Dictionary.prototype.remove = function (key) {
        var keyIndex = this.getIndex(key);
        if (keyIndex >= 0) {
            var removedValue = this._values[keyIndex];
            this._keys.splice(keyIndex, 1);
            this._values.splice(keyIndex, 1);
            return removedValue;
        }
        else {
            throw 'Key does not exist';
        }
    };
    Dictionary.prototype.getValue = function (key) {
        var value = null;
        var keyIndex = this.getIndex(key);
        if (keyIndex >= 0) {
            value = this._values[keyIndex];
        }
        return value;
    };
    Dictionary.prototype.getIndex = function (testKey) {
        var i = 0, len = this._keys.length, key;
        for (; i < len; ++i) {
            key = this._keys[i];
            if (key === testKey) {
                return i;
            }
        }
        return -1;
    };
    Dictionary.prototype.has = function (testKey) {
        var i = 0, len = this._keys.length, key;
        for (i; i < len; ++i) {
            key = this._keys[i];
            if (key === testKey) {
                return true;
            }
        }
        return false;
    };
    Dictionary.prototype.values = function () {
        var i = 0, len = this._keys.length, key, value;
        var arValue = [];
        for (; i < len; ++i) {
            key = this._keys[i];
            value = this._values[i];
            arValue.push(value);
        }
        return arValue;
    };
    Dictionary.prototype.forEach = function (action) {
        var i = 0, len = this._keys.length, key, value;
        for (; i < len; ++i) {
            key = this._keys[i];
            value = this._values[i];
            var breakHere = action(key, value);
            if (breakHere === 'return') {
                return false;
            }
        }
        return true;
    };
    return Dictionary;
})();
exports.Dictionary = Dictionary;

},{}],10:[function(require,module,exports){
var SignalBinding_1 = require('./SignalBinding');
var Signal = (function () {
    function Signal() {
        this._bindings = [];
        this._prevParams = null;
        this.memorize = false;
        this._shouldPropagate = true;
        this.active = true;
    }
    Signal.prototype.validateListener = function (listener, fnName) {
        if (typeof listener !== 'function') {
            throw new Error('listener is a required param of {fn}() and should be a Function.'
                .replace('{fn}', fnName));
        }
    };
    Signal.prototype._registerListener = function (listener, isOnce, listenerContext, priority) {
        var prevIndex = this._indexOfListener(listener, listenerContext);
        var binding;
        if (prevIndex !== -1) {
            binding = this._bindings[prevIndex];
            if (binding.isOnce() !== isOnce) {
                throw new Error('You cannot add' + (isOnce ? '' : 'Once') + '() then add' + (!isOnce ? '' : 'Once')
                    + '() the same listener without removing the relationship first.');
            }
        }
        else {
            binding = new SignalBinding_1.SignalBinding(this, listener, isOnce, listenerContext, priority);
            this._addBinding(binding);
        }
        if (this.memorize && this._prevParams) {
            binding.execute(this._prevParams);
        }
        return binding;
    };
    Signal.prototype._addBinding = function (binding) {
        var n = this._bindings.length;
        do {
            --n;
        } while (this._bindings[n] && binding.priority <= this._bindings[n].priority);
        this._bindings.splice(n + 1, 0, binding);
    };
    Signal.prototype._indexOfListener = function (listener, context) {
        var n = this._bindings.length;
        var cur;
        while (n--) {
            cur = this._bindings[n];
            if (cur.getListener() === listener && cur.context === context) {
                return n;
            }
        }
        return -1;
    };
    Signal.prototype.has = function (listener, context) {
        if (context === void 0) { context = null; }
        return this._indexOfListener(listener, context) !== -1;
    };
    Signal.prototype.add = function (listener, listenerContext, priority) {
        if (listenerContext === void 0) { listenerContext = null; }
        if (priority === void 0) { priority = 0; }
        this.validateListener(listener, 'add');
        return this._registerListener(listener, false, listenerContext, priority);
    };
    Signal.prototype.addOnce = function (listener, listenerContext, priority) {
        if (listenerContext === void 0) { listenerContext = null; }
        if (priority === void 0) { priority = 0; }
        this.validateListener(listener, 'addOnce');
        return this._registerListener(listener, true, listenerContext, priority);
    };
    Signal.prototype.remove = function (listener, context) {
        if (context === void 0) { context = null; }
        this.validateListener(listener, 'remove');
        var i = this._indexOfListener(listener, context);
        if (i !== -1) {
            this._bindings[i]._destroy();
            this._bindings.splice(i, 1);
        }
        return listener;
    };
    Signal.prototype.removeAll = function () {
        var n = this._bindings.length;
        while (n--) {
            this._bindings[n]._destroy();
        }
        this._bindings.length = 0;
    };
    Signal.prototype.getNumListeners = function () {
        return this._bindings.length;
    };
    Signal.prototype.halt = function () {
        this._shouldPropagate = false;
    };
    Signal.prototype.dispatch = function () {
        var paramsArr = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            paramsArr[_i - 0] = arguments[_i];
        }
        if (!this.active) {
            return;
        }
        var n = this._bindings.length;
        var bindings;
        if (this.memorize) {
            this._prevParams = paramsArr;
        }
        if (!n) {
            return;
        }
        bindings = this._bindings.slice(0);
        this._shouldPropagate = true;
        do {
            n--;
        } while (bindings[n] && this._shouldPropagate && bindings[n].execute(paramsArr) !== false);
    };
    Signal.prototype.forget = function () {
        this._prevParams = null;
    };
    Signal.prototype.dispose = function () {
        this.removeAll();
        delete this._bindings;
        delete this._prevParams;
    };
    Signal.prototype.toString = function () {
        return '[Signal active:' + this.active + ' numListeners:' + this.getNumListeners() + ']';
    };
    Signal.VERSION = '1.0.0';
    return Signal;
})();
exports.Signal = Signal;

},{"./SignalBinding":11}],11:[function(require,module,exports){
var SignalBinding = (function () {
    function SignalBinding(signal, listener, isOnce, listenerContext, priority) {
        if (priority === void 0) { priority = 0; }
        this.active = true;
        this.params = null;
        this._listener = listener;
        this._isOnce = isOnce;
        this.context = listenerContext;
        this._signal = signal;
        this.priority = priority || 0;
    }
    SignalBinding.prototype.execute = function (paramsArr) {
        var handlerReturn;
        var params;
        if (this.active && !!this._listener) {
            params = this.params ? this.params.concat(paramsArr) : paramsArr;
            handlerReturn = this._listener.apply(this.context, params);
            if (this._isOnce) {
                this.detach();
            }
        }
        return handlerReturn;
    };
    SignalBinding.prototype.detach = function () {
        return this.isBound() ? this._signal.remove(this._listener, this.context) : null;
    };
    SignalBinding.prototype.isBound = function () {
        return (!!this._signal && !!this._listener);
    };
    SignalBinding.prototype.isOnce = function () {
        return this._isOnce;
    };
    SignalBinding.prototype.getListener = function () {
        return this._listener;
    };
    SignalBinding.prototype.getSignal = function () {
        return this._signal;
    };
    SignalBinding.prototype._destroy = function () {
        delete this._signal;
        delete this._listener;
        delete this.context;
    };
    SignalBinding.prototype.toString = function () {
        return '[SignalBinding isOnce:' + this._isOnce + ', isBound:' + this.isBound() + ', active:'
            + this.active + ']';
    };
    return SignalBinding;
})();
exports.SignalBinding = SignalBinding;

},{}]},{},[8])


//# sourceMappingURL=silverback.min.js.map
