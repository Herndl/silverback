{"version":3,"sources":["silverback.min.js","node_modules/browser-pack/_prelude.js","src/core/ComponentMatchingFamily.ts","src/core/Engine.ts","src/core/EntityList.ts","src/core/NodeList.ts","src/core/NodePool.ts","src/core/SceneList.ts","src/core/System.ts","src/core/SystemList.ts","src/index.ts","src/utils/Dictionary.ts","src/utils/Signal.ts","src/utils/SignalBinding.ts"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","NodePool_1","NodeList_1","Dictionary_1","ComponentMatchingFamily","nodeClass","engine","this","_nodeClass","_engine","_nodes","NodeList","_entities","Dictionary","_components","nodeClassPrototype","prototype","property","hasOwnProperty","componentObject","types","add","_nodePool","NodePool","dispose","get","Object","defineProperty","enumerable","configurable","newEntity","entity","addIfMatch","componentAddedToEntity","componentClass","componentRemovedFromEntity","has","removeIfMatch","removeEntity","forEach","componentName","node","componentRemoved","getValue","remove","updating","cache","updateComplete","_releaseNodePoolCache","releaseCache","cleanUp","head","next","removeAll","../utils/Dictionary","./NodeList","./NodePool",2,"EntityList_1","SceneList_1","SystemList_1","Signal_1","ComponentMatchingFamily_1","Engine","_entityList","EntityList","_entityNames","_sceneList","SceneList","_systemList","SystemList","_families","Signal","familyClass","tmpEntities","push","tmpScenes","scene","tmpSystems","system","addEntity","name","componentAdded","_componentAdded","_componentRemoved","nameChanged","entityNameChanged","nodeObject","family","oldName","removeAllEntities","addScene","removeScene","removeAllScenes","getScene","type","getNodeList","nodeList","releaseNodeList","addSystem","priority","addToEngine","getSystem","removeSystem","removeFromEngine","getEntityByName","removeAllSystems","update","time","dispatch","../utils/Signal","./ComponentMatchingFamily","./EntityList","./SceneList","./SystemList",3,"tail","previous","_removeAll",4,"nodeAdded","nodeRemoved","empty","swap","node1","node2","temp","insertionSort","sortFunction","remains","other","mergeSort","lists","end","start","_merge","head1","head2",5,"components","_tail","newNode","_cacheTail",6,"is",7,"System","isPrototypeOf",8,9,"__export","m","p","./core/Engine","./core/System",10,"_keys","_values","key","value","keyIndex","getIndex","removedValue","splice","testKey","len","values","arValue","action","breakHere",11,"SignalBinding_1","_bindings","_prevParams","memorize","_shouldPropagate","active","validateListener","listener","fnName","replace","_registerListener","isOnce","listenerContext","binding","prevIndex","_indexOfListener","SignalBinding","_addBinding","execute","context","cur","getListener","addOnce","_destroy","getNumListeners","halt","paramsArr","_i","arguments","bindings","slice","forget","toString","VERSION","./SignalBinding",12,"signal","params","_listener","_isOnce","_signal","handlerReturn","concat","apply","detach","isBound","getSignal"],"mappings":"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","file":"silverback.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar NodePool_1 = require('./NodePool');\nvar NodeList_1 = require('./NodeList');\nvar Dictionary_1 = require('../utils/Dictionary');\nvar ComponentMatchingFamily = (function () {\n    function ComponentMatchingFamily(nodeClass, engine) {\n        this._nodeClass = nodeClass;\n        this._engine = engine;\n        this._nodes = new NodeList_1.NodeList();\n        this._entities = new Dictionary_1.Dictionary();\n        this._components = new Dictionary_1.Dictionary();\n        var nodeClassPrototype = this._nodeClass.prototype;\n        for (var property in nodeClassPrototype) {\n            if (nodeClassPrototype.hasOwnProperty(property) &&\n                property !== 'types' &&\n                property !== 'next' &&\n                property !== 'previous' &&\n                property !== 'constructor' &&\n                property !== 'super' &&\n                property !== 'extend' &&\n                property !== 'entity') {\n                var componentObject = nodeClassPrototype.types[property];\n                this._components.add(componentObject, property);\n            }\n        }\n        this._nodePool = new NodePool_1.NodePool(this._nodeClass, this._components);\n        this._nodePool.dispose(this._nodePool.get());\n    }\n    Object.defineProperty(ComponentMatchingFamily.prototype, \"nodeList\", {\n        get: function () {\n            return this._nodes;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ComponentMatchingFamily.prototype.newEntity = function (entity) {\n        this.addIfMatch(entity);\n    };\n    ComponentMatchingFamily.prototype.componentAddedToEntity = function (entity, componentClass) {\n        this.addIfMatch(entity);\n    };\n    ComponentMatchingFamily.prototype.componentRemovedFromEntity = function (entity, componentClass) {\n        if (this._components.has(componentClass)) {\n            this.removeIfMatch(entity);\n        }\n    };\n    ComponentMatchingFamily.prototype.removeEntity = function (entity) {\n        this.removeIfMatch(entity);\n    };\n    ComponentMatchingFamily.prototype.addIfMatch = function (entity) {\n        if (!this._entities.has(entity)) {\n            var componentClass;\n            if (!this._components.forEach(function (componentClass, componentName) {\n                if (!entity.has(componentClass)) {\n                    return 'return';\n                }\n            })) {\n                return;\n            }\n            var node = this._nodePool.get();\n            node.entity = entity;\n            this._components.forEach(function (componentClass, componentName) {\n                node[componentName] = entity.get(componentClass);\n            });\n            this._entities.add(entity, node);\n            entity.componentRemoved.add(this.componentRemovedFromEntity, this);\n            this._nodes.add(node);\n        }\n    };\n    ComponentMatchingFamily.prototype.removeIfMatch = function (entity) {\n        if (this._entities.getValue(entity)) {\n            var node = this._entities.getValue(entity);\n            this._entities.remove(entity);\n            this._nodes.remove(node);\n            if (this._engine.updating) {\n                this._nodePool.cache(node);\n                this._engine.updateComplete.add(this._releaseNodePoolCache, this);\n            }\n            else {\n                this._nodePool.dispose(node);\n            }\n        }\n    };\n    ComponentMatchingFamily.prototype._releaseNodePoolCache = function () {\n        this._engine.updateComplete.remove(this._releaseNodePoolCache);\n        this._nodePool.releaseCache();\n    };\n    ComponentMatchingFamily.prototype.cleanUp = function () {\n        for (var node = this._nodes.head; node; node = node.next) {\n            this._entities.remove(node.entity);\n        }\n        this._nodes.removeAll();\n    };\n    return ComponentMatchingFamily;\n})();\nexports.ComponentMatchingFamily = ComponentMatchingFamily;\n\n},{\"../utils/Dictionary\":10,\"./NodeList\":4,\"./NodePool\":5}],2:[function(require,module,exports){\nvar EntityList_1 = require('./EntityList');\nvar SceneList_1 = require('./SceneList');\nvar SystemList_1 = require('./SystemList');\nvar Dictionary_1 = require('../utils/Dictionary');\nvar Signal_1 = require('../utils/Signal');\nvar ComponentMatchingFamily_1 = require('./ComponentMatchingFamily');\nvar Engine = (function () {\n    function Engine() {\n        this._entityList = new EntityList_1.EntityList();\n        this._entityNames = new Dictionary_1.Dictionary();\n        this._sceneList = new SceneList_1.SceneList();\n        this._systemList = new SystemList_1.SystemList();\n        this._families = new Dictionary_1.Dictionary();\n        this.updateComplete = new Signal_1.Signal();\n        this.familyClass = ComponentMatchingFamily_1.ComponentMatchingFamily;\n    }\n    Object.defineProperty(Engine.prototype, \"entities\", {\n        get: function () {\n            var tmpEntities = [];\n            for (var entity = this._entityList.head; entity; entity = entity.next) {\n                tmpEntities.push(entity);\n            }\n            return tmpEntities;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Engine.prototype, \"scenes\", {\n        get: function () {\n            var tmpScenes = [];\n            for (var scene = this._sceneList.head; scene; scene = scene.next) {\n                tmpScenes.push(scene);\n            }\n            return tmpScenes;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Engine.prototype, \"systems\", {\n        get: function () {\n            var tmpSystems = [];\n            for (var system = this._systemList.head; system; system = system.next) {\n                tmpSystems.push(system);\n            }\n            return tmpSystems;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Engine.prototype.addEntity = function (entity) {\n        if (this._entityNames[entity.name]) {\n            throw new Error('The entity name ' + entity.name + ' is already in use by another entity.');\n        }\n        this._entityList.add(entity);\n        this._entityNames[entity.name] = entity;\n        entity.componentAdded.add(this._componentAdded, this);\n        entity.componentRemoved.add(this._componentRemoved, this);\n        entity.nameChanged.add(this.entityNameChanged);\n        this._families.forEach(function (nodeObject, family) {\n            family.newEntity(entity);\n        });\n    };\n    Engine.prototype.removeEntity = function (entity) {\n        entity.componentAdded.remove(this._componentAdded, this);\n        entity.componentRemoved.remove(this._componentRemoved, this);\n        entity.nameChanged.remove(this.entityNameChanged);\n        this._families.forEach(function (nodeObject, family) {\n            family.removeEntity(entity);\n        });\n        delete this._entityNames[entity.name];\n        this._entityList.remove(entity);\n    };\n    Engine.prototype.entityNameChanged = function (entity, oldName) {\n        if (this._entityNames[oldName] === entity) {\n            delete this._entityNames[oldName];\n            this._entityNames[entity.name] = entity;\n        }\n    };\n    Engine.prototype.removeAllEntities = function () {\n        while (this._entityList.head) {\n            this.removeEntity(this._entityList.head);\n        }\n    };\n    Engine.prototype.addScene = function (scene) {\n        this._sceneList.add(scene);\n    };\n    Engine.prototype.removeScene = function (scene) {\n        this._sceneList.remove(scene);\n    };\n    Engine.prototype.removeAllScenes = function () {\n        while (this._sceneList.head) {\n            this.removeScene(this._sceneList.head);\n        }\n    };\n    Engine.prototype.getScene = function (type) {\n        return this._sceneList.get(type);\n    };\n    Engine.prototype._componentAdded = function (entity, componentClass) {\n        this._families.forEach(function (nodeObject, family) {\n            family.componentAddedToEntity(entity, componentClass);\n        });\n    };\n    Engine.prototype._componentRemoved = function (entity, componentClass) {\n        this._families.forEach(function (nodeObject, family) {\n            family.componentRemovedFromEntity(entity, componentClass);\n        });\n    };\n    Engine.prototype.getNodeList = function (nodeClass) {\n        if (this._families.has(nodeClass)) {\n            return this._families.getValue(nodeClass)._nodes;\n        }\n        var family = new this.familyClass(nodeClass, this);\n        this._families.add(nodeClass, family);\n        for (var entity = this._entityList.head; entity; entity = entity.next) {\n            family.newEntity(entity);\n        }\n        return family.nodeList;\n    };\n    Engine.prototype.releaseNodeList = function (nodeClass) {\n        if (this._families.has(nodeClass)) {\n            this._families.getValue(nodeClass).cleanUp();\n        }\n        this._families.remove(nodeClass);\n    };\n    Engine.prototype.addSystem = function (system, priority) {\n        system.priority = priority;\n        system.addToEngine(this);\n        this._systemList.add(system);\n    };\n    Engine.prototype.getSystem = function (type) {\n        return this._systemList.get(type);\n    };\n    Engine.prototype.removeSystem = function (system) {\n        this._systemList.remove(system);\n        system.removeFromEngine(this);\n    };\n    Engine.prototype.getEntityByName = function (name) {\n        return this._entityNames[name];\n    };\n    Engine.prototype.removeAllSystems = function () {\n        while (this._systemList.head) {\n            this.removeSystem(this._systemList.head);\n        }\n    };\n    Engine.prototype.update = function (time) {\n        this.updating = true;\n        for (var system = this._systemList.head; system; system = system.next) {\n            system.update(time);\n        }\n        this.updating = false;\n        this.updateComplete.dispatch();\n    };\n    return Engine;\n})();\nexports.Engine = Engine;\n\n},{\"../utils/Dictionary\":10,\"../utils/Signal\":11,\"./ComponentMatchingFamily\":1,\"./EntityList\":3,\"./SceneList\":6,\"./SystemList\":8}],3:[function(require,module,exports){\nvar EntityList = (function () {\n    function EntityList() {\n    }\n    EntityList.prototype.add = function (entity) {\n        if (!this.head) {\n            this.head = this.tail = entity;\n            entity.next = entity.previous = null;\n        }\n        else {\n            this.tail.next = entity;\n            entity.previous = this.tail;\n            entity.next = null;\n            this.tail = entity;\n        }\n    };\n    EntityList.prototype.remove = function (entity) {\n        if (this.head === entity) {\n            this.head = this.head.next;\n        }\n        if (this.tail === entity) {\n            this.tail = this.tail.previous;\n        }\n        if (entity.previous) {\n            entity.previous.next = entity.next;\n        }\n        if (entity.next) {\n            entity.next.previous = entity.previous;\n        }\n    };\n    EntityList.prototype._removeAll = function () {\n        while (this.head) {\n            var entity = this.head;\n            this.head = this.head.next;\n            entity.previous = null;\n            entity.next = null;\n        }\n        this.tail = null;\n    };\n    return EntityList;\n})();\nexports.EntityList = EntityList;\n\n},{}],4:[function(require,module,exports){\nvar Signal_1 = require('../utils/Signal');\nvar NodeList = (function () {\n    function NodeList() {\n        this.head = null;\n        this.tail = null;\n        this.nodeAdded = new Signal_1.Signal();\n        this.nodeRemoved = new Signal_1.Signal();\n    }\n    NodeList.prototype.add = function (node) {\n        if (!this.head) {\n            this.head = this.tail = node;\n            node.next = node.previous = null;\n        }\n        else {\n            this.tail.next = node;\n            node.previous = this.tail;\n            node.next = null;\n            this.tail = node;\n        }\n        this.nodeAdded.dispatch(node);\n    };\n    NodeList.prototype.remove = function (node) {\n        if (this.head === node) {\n            this.head = this.head.next;\n        }\n        if (this.tail === node) {\n            this.tail = this.tail.previous;\n        }\n        if (node.previous) {\n            node.previous.next = node.next;\n        }\n        if (node.next) {\n            node.next.previous = node.previous;\n        }\n        this.nodeRemoved.dispatch(node);\n    };\n    NodeList.prototype.removeAll = function () {\n        while (this.head) {\n            var node = this.head;\n            this.head = node.next;\n            node.previous = null;\n            node.next = null;\n            this.nodeRemoved.dispatch(node);\n        }\n        this.tail = null;\n    };\n    NodeList.prototype.empty = function () {\n        return this.head === null;\n    };\n    NodeList.prototype.swap = function (node1, node2) {\n        if (node1.previous === node2) {\n            node1.previous = node2.previous;\n            node2.previous = node1;\n            node2.next = node1.next;\n            node1.next = node2;\n        }\n        else if (node2.previous === node1) {\n            node2.previous = node1.previous;\n            node1.previous = node2;\n            node1.next = node2.next;\n            node2.next = node1;\n        }\n        else {\n            var temp = node1.previous;\n            node1.previous = node2.previous;\n            node2.previous = temp;\n            temp = node1.next;\n            node1.next = node2.next;\n            node2.next = temp;\n        }\n        if (this.head === node1) {\n            this.head = node2;\n        }\n        else if (this.head === node2) {\n            this.head = node1;\n        }\n        if (this.tail === node1) {\n            this.tail = node2;\n        }\n        else if (this.tail === node2) {\n            this.tail = node1;\n        }\n        if (node1.previous) {\n            node1.previous.next = node1;\n        }\n        if (node2.previous) {\n            node2.previous.next = node2;\n        }\n        if (node1.next) {\n            node1.next.previous = node1;\n        }\n        if (node2.next) {\n            node2.next.previous = node2;\n        }\n    };\n    NodeList.prototype.insertionSort = function (sortFunction) {\n        if (this.head === this.tail) {\n            return;\n        }\n        var remains = this.head.next;\n        for (var node = remains; node; node = remains) {\n            remains = node.next;\n            for (var other = node.previous; other; other = other.previous) {\n                if (sortFunction(node, other) >= 0) {\n                    if (node !== other.next) {\n                        if (this.tail === node) {\n                            this.tail = node.previous;\n                        }\n                        node.previous.next = node.next;\n                        if (node.next) {\n                            node.next.previous = node.previous;\n                        }\n                        node.next = other.next;\n                        node.previous = other;\n                        node.next.previous = node;\n                        other.next = node;\n                    }\n                    break;\n                }\n            }\n            if (!other) {\n                if (this.tail === node) {\n                    this.tail = node.previous;\n                }\n                node.previous.next = node.next;\n                if (node.next) {\n                    node.next.previous = node.previous;\n                }\n                node.next = this.head;\n                this.head.previous = node;\n                node.previous = null;\n                this.head = node;\n            }\n        }\n    };\n    NodeList.prototype.mergeSort = function (sortFunction) {\n        if (this.head === this.tail) {\n            return;\n        }\n        var lists;\n        var start = this.head;\n        var end;\n        while (start) {\n            end = start;\n            while (end.next && sortFunction(end, end.next) <= 0) {\n                end = end.next;\n            }\n            var next = end.next;\n            start.previous = end.next = null;\n            lists.push(start);\n            start = next;\n        }\n        while (lists.length > 1) {\n        }\n        this.tail = this.head = lists[0];\n        while (this.tail.next) {\n            this.tail = this.tail.next;\n        }\n    };\n    NodeList.prototype._merge = function (head1, head2, sortFunction) {\n        var node;\n        var head;\n        if (sortFunction(head1, head2) <= 0) {\n            head = node = head1;\n            head1 = head1.next;\n        }\n        else {\n            head = node = head2;\n            head2 = head2.next;\n        }\n        while (head1 && head2) {\n            if (sortFunction(head1, head2) <= 0) {\n                node.next = head1;\n                head1.previous = node;\n                node = head1;\n                head1 = head1.next;\n            }\n            else {\n                node.next = head2;\n                head2.previous = node;\n                node = head2;\n                head2 = head2.next;\n            }\n        }\n        if (head1) {\n            node.next = head1;\n            head1.previous = node;\n        }\n        else {\n            node.next = head2;\n            head2.previous = node;\n        }\n        return head;\n    };\n    return NodeList;\n})();\nexports.NodeList = NodeList;\n\n},{\"../utils/Signal\":11}],5:[function(require,module,exports){\nvar NodePool = (function () {\n    function NodePool(nodeClass, components) {\n        this._nodeClass = nodeClass;\n        this._components = components;\n    }\n    NodePool.prototype.get = function () {\n        if (this._tail) {\n            var node = this._tail;\n            this._tail = this._tail.previous;\n            node.previous = null;\n            return node;\n        }\n        else {\n            var newNode = new this._nodeClass;\n            return newNode;\n        }\n    };\n    NodePool.prototype.dispose = function (node) {\n        this._components.forEach(function (componentClass, componentName) {\n            node[componentName] = null;\n        });\n        node.entity = null;\n        node.next = null;\n        node.previous = this._tail;\n        this._tail = node;\n    };\n    NodePool.prototype.cache = function (node) {\n        node.previous = this._cacheTail;\n        this._cacheTail = node;\n    };\n    NodePool.prototype.releaseCache = function () {\n        while (this._cacheTail) {\n            var node = this._cacheTail;\n            this._cacheTail = node.previous;\n            node.next = null;\n            node.previous = this._tail;\n            this._tail = node;\n        }\n    };\n    return NodePool;\n})();\nexports.NodePool = NodePool;\n\n},{}],6:[function(require,module,exports){\nvar SceneList = (function () {\n    function SceneList() {\n    }\n    SceneList.prototype.add = function (scene) {\n        if (!this.head) {\n            this.head = this.tail = scene;\n            scene.next = scene.previous = null;\n        }\n        else {\n            this.tail.next = scene;\n            scene.previous = this.tail;\n            scene.next = null;\n            this.tail = scene;\n        }\n    };\n    SceneList.prototype.remove = function (scene) {\n        if (this.head === scene) {\n            this.head = this.head.next;\n        }\n        if (this.tail === scene) {\n            this.tail = this.tail.previous;\n        }\n        if (scene.previous) {\n            scene.previous.next = scene.next;\n        }\n        if (scene.next) {\n            scene.next.previous = scene.previous;\n        }\n    };\n    SceneList.prototype._removeAll = function () {\n        while (this.head) {\n            var scene = this.head;\n            this.head = this.head.next;\n            scene.previous = null;\n            scene.next = null;\n        }\n        this.tail = null;\n    };\n    SceneList.prototype.get = function (type) {\n        for (var scene = this.head; scene; scene = scene.next) {\n            if (scene.is(type)) {\n                return scene;\n            }\n        }\n        return null;\n    };\n    return SceneList;\n})();\nexports.SceneList = SceneList;\n\n},{}],7:[function(require,module,exports){\nvar System = (function () {\n    function System() {\n        this.previous = null;\n        this.next = null;\n        this.priority = 0;\n    }\n    System.prototype.addToEngine = function (engine) {\n    };\n    System.prototype.removeFromEngine = function (engine) {\n    };\n    System.prototype.update = function (time) {\n    };\n    System.prototype.is = function (type) {\n        return type.prototype.isPrototypeOf(this);\n    };\n    return System;\n})();\nexports.System = System;\nSystem.prototype.previous = null;\nSystem.prototype.next = null;\nSystem.prototype.priority = 0;\n\n},{}],8:[function(require,module,exports){\nvar SystemList = (function () {\n    function SystemList() {\n    }\n    SystemList.prototype.add = function (system) {\n        if (!this.head) {\n            this.head = this.tail = system;\n            system.next = system.previous = null;\n        }\n        else {\n            for (var node = this.tail; node; node = node.previous) {\n                if (node.priority <= system.priority) {\n                    break;\n                }\n            }\n            if (node === this.tail) {\n                this.tail.next = system;\n                system.previous = this.tail;\n                system.next = null;\n                this.tail = system;\n            }\n            else if (!node) {\n                system.next = this.head;\n                system.previous = null;\n                this.head.previous = system;\n                this.head = system;\n            }\n            else {\n                system.next = node.next;\n                system.previous = node;\n                node.next.previous = system;\n                node.next = system;\n            }\n        }\n    };\n    SystemList.prototype.remove = function (system) {\n        if (this.head === system) {\n            this.head = this.head.next;\n        }\n        if (this.tail === system) {\n            this.tail = this.tail.previous;\n        }\n        if (system.previous) {\n            system.previous.next = system.next;\n        }\n        if (system.next) {\n            system.next.previous = system.previous;\n        }\n    };\n    SystemList.prototype.removeAll = function () {\n        while (this.head) {\n            var system = this.head;\n            this.head = this.head.next;\n            system.previous = null;\n            system.next = null;\n        }\n        this.tail = null;\n    };\n    SystemList.prototype.get = function (type) {\n        for (var system = this.head; system; system = system.next) {\n            if (system.is(type)) {\n                return system;\n            }\n        }\n        return null;\n    };\n    return SystemList;\n})();\nexports.SystemList = SystemList;\n\n},{}],9:[function(require,module,exports){\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n__export(require('./core/Engine'));\n__export(require('./core/System'));\n\n},{\"./core/Engine\":2,\"./core/System\":7}],10:[function(require,module,exports){\nvar Dictionary = (function () {\n    function Dictionary() {\n        this._keys = [];\n        this._values = [];\n    }\n    Dictionary.prototype.add = function (key, value) {\n        var keyIndex = this.getIndex(key);\n        if (keyIndex >= 0) {\n            this._values[keyIndex] = value;\n        }\n        else {\n            this._keys.push(key);\n            this._values.push(value);\n        }\n    };\n    Dictionary.prototype.remove = function (key) {\n        var keyIndex = this.getIndex(key);\n        if (keyIndex >= 0) {\n            var removedValue = this._values[keyIndex];\n            this._keys.splice(keyIndex, 1);\n            this._values.splice(keyIndex, 1);\n            return removedValue;\n        }\n        else {\n            throw 'Key does not exist';\n        }\n    };\n    Dictionary.prototype.getValue = function (key) {\n        var value = null;\n        var keyIndex = this.getIndex(key);\n        if (keyIndex >= 0) {\n            value = this._values[keyIndex];\n        }\n        return value;\n    };\n    Dictionary.prototype.getIndex = function (testKey) {\n        var i = 0, len = this._keys.length, key;\n        for (; i < len; ++i) {\n            key = this._keys[i];\n            if (key === testKey) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    Dictionary.prototype.has = function (testKey) {\n        var i = 0, len = this._keys.length, key;\n        for (i; i < len; ++i) {\n            key = this._keys[i];\n            if (key === testKey) {\n                return true;\n            }\n        }\n        return false;\n    };\n    Dictionary.prototype.values = function () {\n        var i = 0, len = this._keys.length, key, value;\n        var arValue = [];\n        for (; i < len; ++i) {\n            key = this._keys[i];\n            value = this._values[i];\n            arValue.push(value);\n        }\n        return arValue;\n    };\n    Dictionary.prototype.forEach = function (action) {\n        var i = 0, len = this._keys.length, key, value;\n        for (; i < len; ++i) {\n            key = this._keys[i];\n            value = this._values[i];\n            var breakHere = action(key, value);\n            if (breakHere === 'return') {\n                return false;\n            }\n        }\n        return true;\n    };\n    return Dictionary;\n})();\nexports.Dictionary = Dictionary;\n\n},{}],11:[function(require,module,exports){\nvar SignalBinding_1 = require('./SignalBinding');\nvar Signal = (function () {\n    function Signal() {\n        this._bindings = [];\n        this._prevParams = null;\n        this.memorize = false;\n        this._shouldPropagate = true;\n        this.active = true;\n    }\n    Signal.prototype.validateListener = function (listener, fnName) {\n        if (typeof listener !== 'function') {\n            throw new Error('listener is a required param of {fn}() and should be a Function.'\n                .replace('{fn}', fnName));\n        }\n    };\n    Signal.prototype._registerListener = function (listener, isOnce, listenerContext, priority) {\n        var prevIndex = this._indexOfListener(listener, listenerContext);\n        var binding;\n        if (prevIndex !== -1) {\n            binding = this._bindings[prevIndex];\n            if (binding.isOnce() !== isOnce) {\n                throw new Error('You cannot add' + (isOnce ? '' : 'Once') + '() then add' + (!isOnce ? '' : 'Once')\n                    + '() the same listener without removing the relationship first.');\n            }\n        }\n        else {\n            binding = new SignalBinding_1.SignalBinding(this, listener, isOnce, listenerContext, priority);\n            this._addBinding(binding);\n        }\n        if (this.memorize && this._prevParams) {\n            binding.execute(this._prevParams);\n        }\n        return binding;\n    };\n    Signal.prototype._addBinding = function (binding) {\n        var n = this._bindings.length;\n        do {\n            --n;\n        } while (this._bindings[n] && binding.priority <= this._bindings[n].priority);\n        this._bindings.splice(n + 1, 0, binding);\n    };\n    Signal.prototype._indexOfListener = function (listener, context) {\n        var n = this._bindings.length;\n        var cur;\n        while (n--) {\n            cur = this._bindings[n];\n            if (cur.getListener() === listener && cur.context === context) {\n                return n;\n            }\n        }\n        return -1;\n    };\n    Signal.prototype.has = function (listener, context) {\n        if (context === void 0) { context = null; }\n        return this._indexOfListener(listener, context) !== -1;\n    };\n    Signal.prototype.add = function (listener, listenerContext, priority) {\n        if (listenerContext === void 0) { listenerContext = null; }\n        if (priority === void 0) { priority = 0; }\n        this.validateListener(listener, 'add');\n        return this._registerListener(listener, false, listenerContext, priority);\n    };\n    Signal.prototype.addOnce = function (listener, listenerContext, priority) {\n        if (listenerContext === void 0) { listenerContext = null; }\n        if (priority === void 0) { priority = 0; }\n        this.validateListener(listener, 'addOnce');\n        return this._registerListener(listener, true, listenerContext, priority);\n    };\n    Signal.prototype.remove = function (listener, context) {\n        if (context === void 0) { context = null; }\n        this.validateListener(listener, 'remove');\n        var i = this._indexOfListener(listener, context);\n        if (i !== -1) {\n            this._bindings[i]._destroy();\n            this._bindings.splice(i, 1);\n        }\n        return listener;\n    };\n    Signal.prototype.removeAll = function () {\n        var n = this._bindings.length;\n        while (n--) {\n            this._bindings[n]._destroy();\n        }\n        this._bindings.length = 0;\n    };\n    Signal.prototype.getNumListeners = function () {\n        return this._bindings.length;\n    };\n    Signal.prototype.halt = function () {\n        this._shouldPropagate = false;\n    };\n    Signal.prototype.dispatch = function () {\n        var paramsArr = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            paramsArr[_i - 0] = arguments[_i];\n        }\n        if (!this.active) {\n            return;\n        }\n        var n = this._bindings.length;\n        var bindings;\n        if (this.memorize) {\n            this._prevParams = paramsArr;\n        }\n        if (!n) {\n            return;\n        }\n        bindings = this._bindings.slice(0);\n        this._shouldPropagate = true;\n        do {\n            n--;\n        } while (bindings[n] && this._shouldPropagate && bindings[n].execute(paramsArr) !== false);\n    };\n    Signal.prototype.forget = function () {\n        this._prevParams = null;\n    };\n    Signal.prototype.dispose = function () {\n        this.removeAll();\n        delete this._bindings;\n        delete this._prevParams;\n    };\n    Signal.prototype.toString = function () {\n        return '[Signal active:' + this.active + ' numListeners:' + this.getNumListeners() + ']';\n    };\n    Signal.VERSION = '1.0.0';\n    return Signal;\n})();\nexports.Signal = Signal;\n\n},{\"./SignalBinding\":12}],12:[function(require,module,exports){\nvar SignalBinding = (function () {\n    function SignalBinding(signal, listener, isOnce, listenerContext, priority) {\n        if (priority === void 0) { priority = 0; }\n        this.active = true;\n        this.params = null;\n        this._listener = listener;\n        this._isOnce = isOnce;\n        this.context = listenerContext;\n        this._signal = signal;\n        this.priority = priority || 0;\n    }\n    SignalBinding.prototype.execute = function (paramsArr) {\n        var handlerReturn;\n        var params;\n        if (this.active && !!this._listener) {\n            params = this.params ? this.params.concat(paramsArr) : paramsArr;\n            handlerReturn = this._listener.apply(this.context, params);\n            if (this._isOnce) {\n                this.detach();\n            }\n        }\n        return handlerReturn;\n    };\n    SignalBinding.prototype.detach = function () {\n        return this.isBound() ? this._signal.remove(this._listener, this.context) : null;\n    };\n    SignalBinding.prototype.isBound = function () {\n        return (!!this._signal && !!this._listener);\n    };\n    SignalBinding.prototype.isOnce = function () {\n        return this._isOnce;\n    };\n    SignalBinding.prototype.getListener = function () {\n        return this._listener;\n    };\n    SignalBinding.prototype.getSignal = function () {\n        return this._signal;\n    };\n    SignalBinding.prototype._destroy = function () {\n        delete this._signal;\n        delete this._listener;\n        delete this.context;\n    };\n    SignalBinding.prototype.toString = function () {\n        return '[SignalBinding isOnce:' + this._isOnce + ', isBound:' + this.isBound() + ', active:'\n            + this.active + ']';\n    };\n    return SignalBinding;\n})();\nexports.SignalBinding = SignalBinding;\n\n},{}]},{},[9])\n\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n/**\n * The default class for managing a NodeList. This class creates the NodeList and adds and removes\n * nodes to/from the list as the entities and the components in the engine change.\n *\n * It uses the basic entity matching pattern of an entity system - entities are added to the list if\n * they contain components matching all the public properties of the node class.\n */\nimport {Node} from './Node';\nimport {NodePool} from './NodePool';\nimport {NodeList} from './NodeList';\nimport {Engine} from './Engine';\nimport {Entity} from './Entity';\nimport {IFamily} from './IFamily';\nimport {Dictionary} from '../utils/Dictionary';\n\nexport class ComponentMatchingFamily implements IFamily {\n    private _nodes:NodeList;\n    private _entities:Dictionary;\n    private _nodeClass;\n    private _components:Dictionary;\n    private _nodePool:NodePool;\n    private _engine:Engine;\n\n    /**\n     * The constructor. Creates a ComponentMatchingFamily to provide a NodeList for the\n     * given node class.\n     *\n     * @param nodeClass The type of node to create and manage a NodeList for.\n     * @param engine The engine that this family is managing teh NodeList for.\n     */\n    constructor(nodeClass:any, engine:Engine) {\n        this._nodeClass = nodeClass;\n        this._engine = engine;\n\n        this._nodes = new NodeList();\n        this._entities = new Dictionary();\n        this._components = new Dictionary();\n\n        var nodeClassPrototype = this._nodeClass.prototype;\n\n        for (var property in nodeClassPrototype) {\n            ///TODO - tidy this up...\n            if (nodeClassPrototype.hasOwnProperty(property) &&\n                property !== 'types' &&\n                property !== 'next' &&\n                property !== 'previous' &&\n                property !== 'constructor' &&\n                property !== 'super' &&\n                property !== 'extend' &&\n                property !== 'entity') {\n                var componentObject = nodeClassPrototype.types[property];\n                this._components.add(componentObject, property);\n            }\n        }\n\n        this._nodePool = new NodePool(this._nodeClass, this._components);\n        this._nodePool.dispose(this._nodePool.get());\n        /*this._nodeClass = nodeClass;\n         this._engine = engine;\n\n         this._nodePool = new silverback.core.NodePool(this._nodeClass);\n         this._nodes = new silverback.core.NodeList();\n         this._entities = new silverback.utils.Dictionary();\n\n         this._components = new silverback.utils.Dictionary();\n         this._nodePool.dispose(this._nodePool.get()); // create a dummy instance to ensure describeType works.\n\n         var nodeClassPrototype = this._nodeClass.prototype;\n\n         for (var property in nodeClassPrototype) {\n         ///TODO - tidy this up...\n         if (nodeClassPrototype.hasOwnProperty(property) &&\n         property !== 'types' &&\n         property !== 'next' &&\n         property !== 'previous' &&\n         property !== 'constructor' &&\n         property !== 'super' &&\n         property !== 'extend' &&\n         property !== 'entity') {\n         var componentObject = nodeClassPrototype.types[property];\n         this._components.add(componentObject, property);\n         }\n         }\n\n         this._init();*/\n    }\n\n    /**\n     * Initialises the class. Creates the nodelist and other tools. Analyses the node to determine\n     * what component types the node requires.\n     */\n    /*private _init()\n     {\n     }*/\n\n    /**\n     * The nodelist managed by this family. This is a reference that remains valid always\n     * since it is retained and reused by Systems that use the list. i.e. we never recreate the list,\n     * we always modify it in place.\n     */\n    public get nodeList():NodeList {\n        return this._nodes;\n    }\n\n    /**\n     * Called by the engine when an entity has been added to it. We check if the entity should be in\n     * this family's NodeList and add it if appropriate.\n     */\n    public newEntity(entity:Entity) {\n        this.addIfMatch(entity);\n    }\n\n    /**\n     * Called by the engine when a component has been added to an entity. We check if the entity is not in\n     * this family's NodeList and should be, and add it if appropriate.\n     */\n    public componentAddedToEntity(entity:Entity, componentClass:() => any) {\n        this.addIfMatch(entity);\n    }\n\n    /**\n     * Called by the engine when a component has been removed from an entity. We check if the removed component\n     * is required by this family's NodeList and if so, we check if the entity is in this this NodeList and\n     * remove it if so.\n     */\n    public componentRemovedFromEntity(entity:Entity, componentClass:() => any) {\n        if (this._components.has(componentClass)) {\n            this.removeIfMatch(entity);\n        }\n    }\n\n    /**\n     * Called by the engine when an entity has been rmoved from it. We check if the entity is in\n     * this family's NodeList and remove it if so.\n     */\n    public removeEntity(entity:Entity) {\n        this.removeIfMatch(entity);\n    }\n\n    /**\n     * If the entity is not in this family's NodeList, tests the components of the entity to see\n     * if it should be in this NodeList and adds it if so.\n     */\n    public addIfMatch(entity:Entity) {\n        if (!this._entities.has(entity)) {\n            var componentClass;\n            if (\n                !this._components.forEach(function (componentClass, componentName) {\n                    if (!entity.has(componentClass)) {\n                        return 'return';\n                    }\n                })\n            ) {\n                return;\n            }\n            var node = this._nodePool.get();\n            node.entity = entity;\n            this._components.forEach(function (componentClass, componentName) {\n                node[componentName] = entity.get(componentClass);\n            });\n            this._entities.add(entity, node);\n            entity.componentRemoved.add(this.componentRemovedFromEntity, this);\n            this._nodes.add(node);\n        }\n        /*if (!this._entities.getValue(entity))\n         {\n         var componentClass : any;\n         for (componentClass in this._components )\n         {\n         if ( !entity.has( componentClass ) )\n         {\n         return;\n         }\n         }\n         var node: silverback.core.Node = this._nodePool.get();\n         node.entity = entity;\n         for (componentClass in this._components )\n         {\n         node[this._components[componentClass]] = entity.get( componentClass );\n         }\n         this._entities.add(entity, node);\n         this._nodes.add( node );\n         }*/\n    }\n\n    /**\n     * Removes the entity if it is in this family's NodeList.\n     */\n    public removeIfMatch(entity:Entity) {\n        if (this._entities.getValue(entity)) {\n            var node:Node = this._entities.getValue(entity);\n            this._entities.remove(entity);\n            this._nodes.remove(node);\n            if (this._engine.updating) {\n                this._nodePool.cache(node);\n                this._engine.updateComplete.add(this._releaseNodePoolCache, this);\n            } else {\n                this._nodePool.dispose(node);\n            }\n        }\n    }\n\n    /**\n     * Releases the nodes that were added to the node pool during this engine update, so they can\n     * be reused.\n     */\n    private _releaseNodePoolCache() {\n        this._engine.updateComplete.remove(this._releaseNodePoolCache);\n        this._nodePool.releaseCache();\n    }\n\n    /**\n     * Removes all nodes from the NodeList.\n     */\n    public cleanUp() {\n        for (var node:Node = this._nodes.head; node; node = node.next) {\n            this._entities.remove(node.entity);\n        }\n        this._nodes.removeAll();\n    }\n}","/**\n * @module Silverback\n */\n\n/// <reference path=\"../../typings/tsd.d.ts\" />\n///<reference path=\"IFamily.ts\"/>\n\nimport {Entity} from './Entity';\nimport {EntityList} from './EntityList';\nimport {Scene} from './Scene';\nimport {SceneList} from './SceneList';\nimport {SystemList} from './SystemList';\nimport {NodeList} from './NodeList';\nimport {Dictionary} from '../utils/Dictionary';\nimport {Signal} from '../utils/Signal';\nimport {System} from './System';\nimport {ComponentMatchingFamily} from './ComponentMatchingFamily';\nimport {IFamily} from './IFamily';\n\n/**\n * The Engine class is the central point for creating and managing your game state. Add\n * entities and systems to the engine, and fetch families of nodes from the engine.\n */\nexport class Engine {\n\n    private _entityNames:Dictionary;\n    private _entityList:EntityList;\n    private _sceneList:SceneList;\n    private _systemList:SystemList;\n    private _families:Dictionary;\n\n    private _tempArray;\n    /**\n     * Indicates if the engine is currently in its update loop.\n     */\n    public updating:boolean;\n\n    /**\n     * Dispatched when the update loop ends. If you want to add and remove systems from the\n     * engine it is usually best not to do so during the update loop. To avoid this you can\n     * listen for this signal and make the change when the signal is dispatched.\n     */\n    public updateComplete:Signal;\n\n    /**\n     * The class used to manage node lists. In most cases the default class is sufficient\n     * but it is exposed here so advanced developers can choose to create and use a\n     * different implementation.\n     *\n     * The class must implement the Family interface.\n     */\n    public familyClass;\n\n    constructor() {\n        this._entityList = new EntityList();\n        this._entityNames = new Dictionary();\n        this._sceneList = new SceneList();\n        this._systemList = new SystemList();\n        this._families = new Dictionary();\n        this.updateComplete = new Signal();\n\n        this.familyClass = ComponentMatchingFamily;\n    }\n\n    public get entities():Array<Entity> {\n        var tmpEntities = [];\n        for(var entity = this._entityList.head; entity; entity = entity.next) {\n            tmpEntities.push(entity);\n        }\n        return tmpEntities;\n    }\n\n    public get scenes():Array<Scene> {\n        var tmpScenes = [];\n        for(var scene = this._sceneList.head; scene; scene = scene.next) {\n            tmpScenes.push(scene);\n        }\n        return tmpScenes;\n    }\n\n    public get systems():Array<System> {\n        var tmpSystems = [];\n        for (var system = this._systemList.head; system; system = system.next) {\n            tmpSystems.push(system);\n        }\n        return tmpSystems;\n    }\n\n    /**\n     * Add an entity to the engine.\n     *\n     * @param entity The entity to add.\n     */\n    public addEntity(entity:Entity):void {\n        if( this._entityNames[ entity.name ] ) {\n            throw new Error( 'The entity name ' + entity.name + ' is already in use by another entity.' );\n        }\n        this._entityList.add( entity );\n        this._entityNames[entity.name] = entity;\n        entity.componentAdded.add(this._componentAdded, this);\n        entity.componentRemoved.add(this._componentRemoved, this);\n        entity.nameChanged.add( this.entityNameChanged );\n\n        this._families.forEach(\n            (nodeObject, family:IFamily) => {\n                family.newEntity(entity);\n            }\n        );\n    }\n\n    /**\n     * Remove an entity from the engine.\n     *\n     * @param entity The entity to remove.\n     */\n    public removeEntity(entity: Entity):void {\n        entity.componentAdded.remove(this._componentAdded, this);\n        entity.componentRemoved.remove(this._componentRemoved, this);\n        entity.nameChanged.remove( this.entityNameChanged );\n\n        this._families.forEach(\n            function (nodeObject, family: IFamily) {\n                family.removeEntity(entity);\n            }\n        );\n        delete this._entityNames[entity.name];\n        this._entityList.remove( entity );\n    }\n\n    private entityNameChanged(entity:Entity, oldName:string ):void {\n        if( this._entityNames[ oldName ] === entity ) {\n            delete this._entityNames[ oldName ];\n            this._entityNames[ entity.name ] = entity;\n        }\n    }\n\n    /**\n     * Remove all entities from the engine.\n     */\n    public removeAllEntities():void {\n        while (this._entityList.head) {\n            this.removeEntity(this._entityList.head);\n        }\n    }\n\n    /**\n     * Add an scene to the engine.\n     *\n     * @param scene The entity to add.\n     */\n    public addScene(scene:Scene):void {\n        this._sceneList.add( scene );\n       /* scene.entityAdded.add(this._entityAdded, this);\n        scene.entityRemoved.add(this._entityRemoved, this);*/\n    }\n\n    /**\n     * Remove an entity from the engine.\n     *\n     * @param scene The scene to remove.\n     */\n    public removeScene(scene:Scene):void {\n        /*scene.entityAdded.remove(this._entityAdded, this);\n        scene.entityRemoved.remove(this._entityRemoved, this);*/\n\n        this._sceneList.remove( scene );\n    }\n\n    /**\n     * Remove all entities from the engine.\n     */\n    public removeAllScenes():void {\n        while (this._sceneList.head) {\n            this.removeScene(this._sceneList.head);\n        }\n    }\n\n    public getScene(type):Scene {\n        return this._sceneList.get(type);\n    }\n\n    /**\n     * @private\n     */\n    private _componentAdded(entity: Entity, componentClass:() => any):void {\n        this._families.forEach(\n            function (nodeObject, family:IFamily) {\n                family.componentAddedToEntity(entity, componentClass);\n            }\n        );\n    }\n\n    /**\n     * @private\n     */\n    private _componentRemoved(entity: Entity, componentClass:() => any):void {\n        this._families.forEach(\n            function (nodeObject, family:IFamily) {\n                family.componentRemovedFromEntity(entity, componentClass);\n            }\n        );\n    }\n\n    /**\n     * Get a collection of nodes from the engine, based on the type of the node required.\n     *\n     * <p>The engine will create the appropriate NodeList if it doesn't already exist and\n     * will keep its contents up to date as entities are added to and removed from the\n     * engine.</p>\n     *\n     * <p>If a NodeList is no longer required, release it with the releaseNodeList method.</p>\n     *\n     * @param nodeClass The type of node required.\n     * @return A linked list of all nodes of this type from all entities in the engine.\n     */\n    public getNodeList(nodeClass):NodeList {\n        if(this._families.has(nodeClass)) {\n            return this._families.getValue(nodeClass)._nodes;\n        }\n        var family = new this.familyClass(nodeClass, this);\n        this._families.add(nodeClass, family);\n        for (var entity:Entity = this._entityList.head; entity; entity = entity.next) {\n            family.newEntity(entity);\n        }\n        return family.nodeList;\n    }\n\n    /**\n     * If a NodeList is no longer required, this method will stop the engine updating\n     * the list and will release all references to the list within the framework\n     * classes, enabling it to be garbage collected.\n     *\n     * <p>It is not essential to release a list, but releasing it will free\n     * up memory and processor resources.</p>\n     *\n     * @param nodeClass The type of the node class if the list to be released.\n     */\n    public releaseNodeList(nodeClass) {\n        if (this._families.has(nodeClass)) {\n            this._families.getValue(nodeClass).cleanUp();\n        }\n        this._families.remove(nodeClass);\n    }\n\n    /**\n     * Add a system to the engine, and set its priority for the order in which the\n     * systems are updated by the engine update loop.\n     *\n     * <p>The priority dictates the order in which the systems are updated by the engine update\n     * loop. Lower numbers for priority are updated first. i.e. a priority of 1 is\n     * updated before a priority of 2.</p>\n     *\n     * @param system The system to add to the engine.\n     * @param priority The priority for updating the systems during the engine loop. A\n     * lower number means the system is updated sooner.\n     */\n    public addSystem(system:System, priority:number) {\n        system.priority = priority;\n        system.addToEngine( this );\n        this._systemList.add( system );\n    }\n\n    /**\n     * Get the system instance of a particular type from within the engine.\n     *\n     * @param type The type of system\n     * @return The instance of the system type that is in the engine, or\n     * null if no systems of this type are in the engine.\n     */\n    public getSystem(type):System {\n        return this._systemList.get( type );\n    }\n\n    /**\n     * Returns a vector containing all the systems in the engine.\n     */\n    //public get systems() : Vector.<System>\n    //{\n    //\tvar systems : Vector.<System> = new Vector.<System>();\n    //\tfor (var system: MSystem.ash.core.System = systemList.head; system; system = system.next )\n    //\t{\n    //\t\tsystems.push( system );\n    //\t}\n    //\treturn systems;\n    //}\n\n    /**\n     * Remove a system from the engine.\n     *\n     * @param system The system to remove from the engine.\n     */\n    public removeSystem(system:System) {\n        this._systemList.remove( system );\n        system.removeFromEngine( this );\n    }\n\n    /**\n     * Get an entity based n its name.\n     *\n     * @param name The name of the entity\n     * @return The entity, or null if no entity with that name exists on the engine\n     */\n    public getEntityByName(name:string):Entity {\n        return this._entityNames[name];\n    }\n\n    /**\n     * Remove all systems from the engine.\n     */\n    public removeAllSystems() {\n        while( this._systemList.head ) {\n            this.removeSystem(this._systemList.head );\n        }\n    }\n\n    /**\n     * Update the engine. This causes the engine update loop to run, calling update on all the\n     * systems in the engine.\n     *\n     * @time The duration, in seconds, of this update step.\n     */\n    public update(time:number) {\n        this.updating = true;\n        for (var system:System = this._systemList.head; system; system = system.next) {\n            system.update(time);\n        }\n        this.updating = false;\n        this.updateComplete.dispatch();\n    }\n}","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n/**\n * An export class for a linked list of entities. Used inside the framework for\n * managing the entities.\n */\n\nimport {Entity} from './Entity';\n\nexport class EntityList {\n\n    public head:Entity;\n    public tail:Entity;\n\n    public add(entity:Entity) {\n        if (!this.head) {\n            this.head = this.tail = entity;\n            entity.next = entity.previous = null;\n        } else {\n            this.tail.next = entity;\n            entity.previous = this.tail;\n            entity.next = null;\n            this.tail = entity;\n        }\n    }\n\n    public remove(entity:Entity) {\n        if (this.head === entity) {\n            this.head = this.head.next;\n        }\n        if (this.tail === entity) {\n            this.tail = this.tail.previous;\n        }\n\n        if (entity.previous) {\n            entity.previous.next = entity.next;\n        }\n\n        if (entity.next) {\n            entity.next.previous = entity.previous;\n        }\n        // N.B. Don't set node.next and node.previous to null because that will break the list iteration if node is\n        // the current node in the iteration.\n    }\n\n    private _removeAll() {\n        while (this.head) {\n            var entity:Entity = this.head;\n            this.head = this.head.next;\n            entity.previous = null;\n            entity.next = null;\n        }\n        this.tail = null;\n    }\n}","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n\n/**\n * A collection of nodes.\n *\n * <p>Systems within the engine access the components of entities via NodeLists. A NodeList contains\n * a node for each Entity in the engine that has all the components required by the node. To iterate\n * over a NodeList, start from the head and step to the next on each loop, until the returned value\n * is null.</p>\n *\n * <p>for( var node : Node = nodeList.head; node; node = node.next )\n * {\n\t *   // do stuff\n\t * }</p>\n *\n * <p>It is safe to remove items from a nodelist during the loop. When a Node is removed form the\n * NodeList it's previous and next properties still point to the nodes that were before and after\n * it in the NodeList just before it was removed.</p>\n */\n\nimport {Node} from './Node';\nimport {Signal} from '../utils/Signal';\n\nexport class NodeList {\n    /**\n     * The first item in the node list, or null if the list contains no nodes.\n     */\n    public head:any = null;\n    /**\n     * The last item in the node list, or null if the list contains no nodes.\n     */\n    public tail:any = null;\n\n    /**\n     * A signal that is dispatched whenever a node is added to the node list.\n     *\n     * <p>The signal will pass a single parameter to the listeners - the node that was added.</p>\n     */\n    public nodeAdded:Signal;\n    /**\n     * A signal that is dispatched whenever a node is removed from the node list.\n     *\n     * <p>The signal will pass a single parameter to the listeners - the node that was removed.</p>\n     */\n    public nodeRemoved:Signal;\n\n    constructor() {\n        this.nodeAdded = new Signal();\n        this.nodeRemoved = new Signal();\n    }\n\n    public add(node:Node):void {\n        if (!this.head) {\n            this.head = this.tail = node;\n            node.next = node.previous = null;\n        } else {\n            this.tail.next = node;\n            node.previous = this.tail;\n            node.next = null;\n            this.tail = node;\n        }\n        this.nodeAdded.dispatch(node);\n    }\n\n    public remove(node:Node) {\n        if (this.head === node) {\n            this.head = this.head.next;\n        }\n        if (this.tail === node) {\n            this.tail = this.tail.previous;\n        }\n        if (node.previous) {\n            node.previous.next = node.next;\n        }\n        if (node.next) {\n            node.next.previous = node.previous;\n        }\n        this.nodeRemoved.dispatch(node);\n        // N.B. Don't set node.next and node.previous to null because that will break the list iteration if node is\n        // the current node in the iteration.\n    }\n\n    public removeAll() {\n        while (this.head) {\n            var node:Node = this.head;\n            this.head = node.next;\n            node.previous = null;\n            node.next = null;\n            this.nodeRemoved.dispatch(node);\n        }\n        this.tail = null;\n    }\n\n    /**\n     * true if the list is empty, false otherwise.\n     */\n    public empty():boolean {\n        return this.head === null;\n    }\n\n    /**\n     * Swaps the positions of two nodes in the list. Useful when sorting a list.\n     */\n    public swap(node1:Node, node2:Node) {\n        if (node1.previous === node2) {\n            node1.previous = node2.previous;\n            node2.previous = node1;\n            node2.next = node1.next;\n            node1.next = node2;\n        } else if (node2.previous === node1) {\n            node2.previous = node1.previous;\n            node1.previous = node2;\n            node1.next = node2.next;\n            node2.next = node1;\n        } else {\n            var temp:Node = node1.previous;\n            node1.previous = node2.previous;\n            node2.previous = temp;\n            temp = node1.next;\n            node1.next = node2.next;\n            node2.next = temp;\n        }\n\n        if (this.head === node1) {\n            this.head = node2;\n        } else if (this.head === node2) {\n            this.head = node1;\n        }\n        if (this.tail === node1) {\n            this.tail = node2;\n        } else if (this.tail === node2) {\n            this.tail = node1;\n        }\n\n        if (node1.previous) {\n            node1.previous.next = node1;\n        }\n        if (node2.previous) {\n            node2.previous.next = node2;\n        }\n        if (node1.next) {\n            node1.next.previous = node1;\n        }\n        if (node2.next) {\n            node2.next.previous = node2;\n        }\n    }\n\n    /**\n     * Performs an insertion sort on the node list. In general, insertion sort is very efficient with short lists\n     * and with lists that are mostly sorted, but is inefficient with large lists that are randomly ordered.\n     *\n     * <p>The sort function takes two nodes and returns a Number.</p>\n     *\n     * <p><code>function sortFunction( node1 : MockNode, node2 : MockNode ) :number</code></p>\n     *\n     * <p>If the returned number is less than zero, the first node should be before the second. If it is greater\n     * than zero the second node should be before the first. If it is zero the order of the nodes doesn't matter\n     * and the original order will be retained.</p>\n     *\n     * <p>This insertion sort implementation runs in place so no objects are created during the sort.</p>\n     */\n    public insertionSort(sortFunction) {\n        if (this.head === this.tail) {\n            return;\n        }\n        var remains:Node = this.head.next;\n        for (var node:Node = remains; node; node = remains) {\n            remains = node.next;\n            for (var other:Node = node.previous; other; other = other.previous) {\n                if (sortFunction(node, other) >= 0) {\n                    // move node to after other\n                    if (node !== other.next) {\n                        // remove from place\n                        if (this.tail === node) {\n                            this.tail = node.previous;\n                        }\n                        node.previous.next = node.next;\n                        if (node.next) {\n                            node.next.previous = node.previous;\n                        }\n                        // insert after other\n                        node.next = other.next;\n                        node.previous = other;\n                        node.next.previous = node;\n                        other.next = node;\n                    }\n                    break; // exit the inner for loop\n                }\n            }\n            if (!other) { // the node belongs at the start of the list\n                // remove from place\n                if (this.tail === node) {\n                    this.tail = node.previous;\n                }\n                node.previous.next = node.next;\n                if (node.next) {\n                    node.next.previous = node.previous;\n                }\n                // insert at head\n                node.next = this.head;\n                this.head.previous = node;\n                node.previous = null;\n                this.head = node;\n            }\n        }\n    }\n\n    /**\n     * Performs a merge sort on the node list. In general, merge sort is more efficient than insertion sort\n     * with long lists that are very unsorted.\n     *\n     * <p>The sort function takes two nodes and returns a Number.</p>\n     *\n     * <p><code>function sortFunction( node1 : MockNode, node2 : MockNode ) :number</code></p>\n     *\n     * <p>If the returned number is less than zero, the first node should be before the second. If it is greater\n     * than zero the second node should be before the first. If it is zero the order of the nodes doesn't matter.</p>\n     *\n     * <p>This merge sort implementation creates and uses a single Vector during the sort operation.</p>\n     */\n    public mergeSort(sortFunction) {\n        if (this.head === this.tail) {\n            return;\n        }\n        //var lists: Vector.<Node> = new Vector.< Node >;\n        var lists:any;\n        // disassemble the list\n        var start:Node = this.head;\n        var end:Node;\n        while (start) {\n            end = start;\n            while (end.next && sortFunction(end, end.next) <= 0) {\n                end = end.next;\n            }\n            var next:Node = end.next;\n            start.previous = end.next = null;\n            lists.push(start);\n            start = next;\n        }\n        // reassemble it in order\n        while (lists.length > 1) {\n            //TODO VECTOR CLASS\n            //lists.push( merge( lists.shift(), lists.shift(), sortFunction ) );\n        }\n        // find the tail\n        this.tail = this.head = lists[0];\n        while (this.tail.next) {\n            this.tail = this.tail.next;\n        }\n    }\n\n    private _merge(head1:Node, head2:Node, sortFunction):Node {\n        var node:Node;\n        var head:Node;\n        if (sortFunction(head1, head2) <= 0) {\n            head = node = head1;\n            head1 = head1.next;\n        } else {\n            head = node = head2;\n            head2 = head2.next;\n        }\n        while (head1 && head2) {\n            if (sortFunction(head1, head2) <= 0) {\n                node.next = head1;\n                head1.previous = node;\n                node = head1;\n                head1 = head1.next;\n            } else {\n                node.next = head2;\n                head2.previous = node;\n                node = head2;\n                head2 = head2.next;\n            }\n        }\n        if (head1) {\n            node.next = head1;\n            head1.previous = node;\n        } else {\n            node.next = head2;\n            head2.previous = node;\n        }\n        return head;\n    }\n}","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n/**\n * This export class maintains a pool of deleted nodes for reuse by the framework. This reduces the overhead\n * from object creation and garbage collection.\n *\n * Because nodes may be deleted from a NodeList while in use, by deleting Nodes from a NodeList\n * while iterating through the NodeList, the pool also maintains a cache of nodes that are added to the pool\n * but should not be reused yet. They are then released into the pool by calling the releaseCache method.\n */\nimport {Node} from './Node';\n\nexport class NodePool {\n    private _tail:Node;\n    private _nodeClass;\n    private _cacheTail:Node;\n    private _components;\n\n    /**\n     * Creates a pool for the given node class.\n     */\n    constructor(nodeClass, components) {\n        this._nodeClass = nodeClass;\n        this._components = components;\n    }\n\n    /**\n     * Fetches a node from the pool.\n     */\n    public get() {\n        if (this._tail) {\n            var node = this._tail;\n            this._tail = this._tail.previous;\n            node.previous = null;\n            return node;\n        } else {\n            var newNode = new this._nodeClass;\n            return newNode;\n        }\n    }\n\n    /**\n     * Adds a node to the pool.\n     */\n    public dispose(node:Node) {\n        this._components.forEach(function (componentClass, componentName) {\n            node[componentName] = null;\n        });\n        node.entity = null;\n        node.next = null;\n        node.previous = this._tail;\n        this._tail = node;\n    }\n\n    /**\n     * Adds a node to the cache\n     */\n    public cache(node:Node) {\n        node.previous = this._cacheTail;\n        this._cacheTail = node;\n    }\n\n    /**\n     * Releases all nodes from the cache into the pool\n     */\n    public releaseCache() {\n        while (this._cacheTail) {\n            var node:Node = this._cacheTail;\n            this._cacheTail = node.previous;\n            node.next = null;\n            node.previous = this._tail;\n            this._tail = node;\n        }\n    }\n}","/// <reference path=\"../../typings/tsd.d.ts\" />\n\nimport {Scene} from './Scene';\n\nexport class SceneList {\n    public head:Scene;\n    public tail:Scene;\n\n    public add(scene:Scene) {\n        if (!this.head) {\n            this.head = this.tail = scene;\n            scene.next = scene.previous = null;\n        } else {\n            this.tail.next = scene;\n            scene.previous = this.tail;\n            scene.next = null;\n            this.tail = scene;\n        }\n    }\n\n    public remove(scene:Scene) {\n        if (this.head === scene) {\n            this.head = this.head.next;\n        }\n        if (this.tail === scene) {\n            this.tail = this.tail.previous;\n        }\n\n        if (scene.previous) {\n            scene.previous.next = scene.next;\n        }\n\n        if (scene.next) {\n            scene.next.previous = scene.previous;\n        }\n    }\n\n    private _removeAll() {\n        while (this.head) {\n            var scene:Scene = this.head;\n            this.head = this.head.next;\n            scene.previous = null;\n            scene.next = null;\n        }\n        this.tail = null;\n    }\n\n    public get(type):Scene {\n        for (var scene = this.head; scene; scene = scene.next) {\n            if (scene.is(type)) {\n                return scene;\n            }\n        }\n        return null;\n    }\n}","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n/**\n * The base class for a system.\n *\n * <p>A system is part of the core functionality of the game. After a system is added to the engine, its\n * update method will be called on every frame of the engine. When the system is removed from the engine,\n * the update method is no longer called.</p>\n *\n * <p>The aggregate of all systems in the engine is the functionality of the game, with the update\n * methods of those systems collectively constituting the engine update loop. Systems generally operate on\n * node lists - collections of nodes. Each node contains the components from an entity in the engine\n * that match the node.</p>\n */\nexport class System {\n\n    /**\n     * Used internally to manage the list of systems within the engine. The previous system in the list.\n     */\n    public previous:System = null;\n    /**\n     * Used internally to manage the list of systems within the engine. The next system in the list.\n     */\n    public next:System = null;\n    /**\n     * Used internally to hold the priority of this system within the system list. This is\n     * used to order the systems so they are updated in the correct order.\n     */\n    public priority:number = 0;\n\n\n    /**\n     * Called just after the system is added to the engine, before any calls to the update method.\n     * Override this method to add your own functionality.\n     *\n     * @param engine The engine the system was added to.\n     */\n    public addToEngine(engine:any):void {\n        /* Empty function */\n    }\n\n    /**\n     * Called just after the system is removed from the engine, after all calls to the update method.\n     * Override this method to add your own functionality.\n     *\n     * @param engine The engine the system was removed from.\n     */\n    public removeFromEngine(engine:any):void {\n        /* Empty function */\n    }\n\n    /**\n     * After the system is added to the engine, this method is called every frame until the system\n     * is removed from the engine. Override this method to add your own functionality.\n     *\n     * <p>If you need to perform an action outside of the update loop (e.g. you need to change the\n     * systems in the engine and you don't want to do it while they're updating) add a listener to\n     * the engine's updateComplete signal to be notified when the update loop completes.</p>\n     *\n     * @param time The duration, in seconds, of the frame.\n     */\n    public update(time:number) {\n        /* Empty function */\n    }\n\n    public is(type) {\n        return type.prototype.isPrototypeOf(this);\n    }\n}\n\nSystem.prototype.previous = null;\nSystem.prototype.next = null;\nSystem.prototype.priority = 0;\n","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n/**\n * Used internally, this is an ordered list of Systems for use by the engine update loop.\n */\n\nimport {System} from './System';\n\nexport class SystemList {\n\n    public head:System;\n    public tail:System;\n\n    public add(system:System) {\n        if (!this.head) {\n            this.head = this.tail = system;\n            system.next = system.previous = null;\n        } else {\n            for (var node = this.tail; node; node = node.previous) {\n                if (node.priority <= system.priority) {\n                    break;\n                }\n            }\n            if (node === this.tail) {\n                this.tail.next = system;\n                system.previous = this.tail;\n                system.next = null;\n                this.tail = system;\n            } else if (!node) {\n                system.next = this.head;\n                system.previous = null;\n                this.head.previous = system;\n                this.head = system;\n            } else {\n                system.next = node.next;\n                system.previous = node;\n                node.next.previous = system;\n                node.next = system;\n            }\n        }\n    }\n\n    public remove(system:System) {\n        if (this.head === system) {\n            this.head = this.head.next;\n        }\n        if (this.tail === system) {\n            this.tail = this.tail.previous;\n        }\n\n        if (system.previous) {\n            system.previous.next = system.next;\n        }\n\n        if (system.next) {\n            system.next.previous = system.previous;\n        }\n    }\n\n    public removeAll() {\n        while (this.head) {\n            var system = this.head;\n            this.head = this.head.next;\n            system.previous = null;\n            system.next = null;\n        }\n        this.tail = null;\n    }\n\n    public get(type):System {\n        for (var system = this.head; system; system = system.next) {\n            if (system.is(type)) {\n                return system;\n            }\n        }\n        return null;\n    }\n}","/**\n * @author       Stefan Herndlbauer <sherndlbauer@gorillabyte.com>\n * @copyright    2015 Gorillabyte\n * @license      {@link http://repo.gorillabyte.com/cos/silverback/blob/master/README.md|LGPL License}\n *\n * */\n\n // Core components of the engine\nexport * from './core/Engine';\nexport * from './core/System';\n\n","/// <reference path=\"../../typings/tsd.d.ts\" />\n\nexport class Dictionary {\n\n    private _keys: any[];\n    private _values: any[];\n\n    constructor() {\n        this._keys = [];\n        this._values = [];\n    }\n\n    public add(key, value) {\n        var keyIndex = this.getIndex(key);\n        if (keyIndex >= 0) {\n            this._values[keyIndex] = value;\n        } else {\n            this._keys.push(key);\n            this._values.push(value);\n        }\n    }\n\n    public remove(key): any {\n        var keyIndex = this.getIndex(key);\n        if (keyIndex >= 0) {\n            var removedValue = this._values[keyIndex];\n            this._keys.splice(keyIndex, 1);\n            this._values.splice(keyIndex, 1);\n            return removedValue;\n        } else {\n            throw 'Key does not exist';\n        }\n    }\n\n    public getValue(key) {\n        var value = null;\n        var keyIndex = this.getIndex(key);\n        if (keyIndex >= 0) {\n            value = this._values[keyIndex];\n        }\n        return value;\n    }\n\n    public getIndex(testKey) {\n        var i = 0,\n            len = this._keys.length,\n            key;\n        for (; i < len; ++i) {\n            key = this._keys[i];\n            if (key === testKey) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    public has(testKey) {\n        var i = 0,\n            len = this._keys.length,\n            key;\n        for (i; i < len; ++i) {\n            key = this._keys[i];\n            if (key === testKey) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public values(): any[] {\n        var i = 0,\n            len = this._keys.length,\n            key,\n            value;\n        var arValue: any[] = [];\n\n        for (; i < len; ++i) {\n            key = this._keys[i];\n            value = this._values[i];\n            arValue.push(value);\n        }\n        return arValue;\n    }\n\n    public forEach(action) {\n        var i = 0,\n            len = this._keys.length,\n            key,\n            value;\n\n        for (; i < len; ++i) {\n            key = this._keys[i];\n            value = this._values[i];\n            var breakHere = action(key, value);\n            if (breakHere === 'return') {\n                return false;\n            }\n        }\n        return true;\n    }\n}","/// <reference path=\"../../typings/tsd.d.ts\" />\n\nimport {SignalBinding} from './SignalBinding';\n\nexport class Signal {\n\n    /**\n     * @property _bindings\n     * @type Array\n     * @private\n     */\n    private _bindings:SignalBinding[] = [];\n\n    /**\n     * @property _prevParams\n     * @type Any\n     * @private\n     */\n    private _prevParams = null;\n\n    /**\n     * Signals Version Number\n     * @property VERSION\n     * @type String\n     * @const\n     */\n    public static VERSION:string = '1.0.0';\n\n    /**\n     * If Signal should keep record of previously dispatched parameters and\n     * automatically execute listener during `add()`/`addOnce()` if Signal was\n     * already dispatched before.\n     * @type booleanean\n     */\n    public memorize:boolean = false;\n\n    /**\n     * @type booleanean\n     * @private\n     */\n    private _shouldPropagate:boolean = true;\n\n    /**\n     * If Signal is active and should broadcast events.\n     * <p><strong>IMPORTANT:</strong> Setting this property during a dispatch will only affect the next dispatch,\n     * if you want to stop the propagation of a signal use `halt()` instead.</p>\n     * @type booleanean\n     */\n    public active:boolean = true;\n\n    /**\n     * @method validateListener\n     * @param {Any} listener\n     * @param {Any} fnName\n     */\n    public validateListener(listener, fnName) {\n\n        if (typeof listener !== 'function') {\n            throw new Error('listener is a required param of {fn}() and should be a Function.'\n                .replace('{fn}', fnName));\n        }\n\n    }\n\n    /**\n     * @param {Function} listener\n     * @param {booleanean} isOnce\n     * @param {Object} [listenerContext]\n     * @param {Number} [priority]\n     * @return {mSignalBinding.SignalBinding}\n     * @private\n     */\n    private _registerListener(listener, isOnce:boolean, listenerContext, priority:number):SignalBinding {\n\n        var prevIndex:number = this._indexOfListener(listener, listenerContext);\n        var binding:SignalBinding;\n\n        if (prevIndex !== -1) {\n            binding = this._bindings[prevIndex];\n\n            if (binding.isOnce() !== isOnce) {\n                throw new Error('You cannot add' + (isOnce ? '' : 'Once') + '() then add' + (!isOnce ? '' : 'Once')\n                    + '() the same listener without removing the relationship first.');\n            }\n        } else {\n            binding = new SignalBinding(this, listener, isOnce, listenerContext, priority);\n\n            this._addBinding(binding);\n        }\n\n        if (this.memorize && this._prevParams) {\n            binding.execute(this._prevParams);\n        }\n\n        return binding;\n\n    }\n\n    /**\n     * @method _addBinding\n     * @param {mSignalBinding.SignalBinding} binding\n     * @private\n     */\n    private _addBinding(binding:SignalBinding) {\n\n        //simplified insertion sort\n\n        var n:number = this._bindings.length;\n\n        do {\n            --n;\n        } while (this._bindings[n] && binding.priority <= this._bindings[n].priority);\n\n        this._bindings.splice(n + 1, 0, binding);\n\n    }\n\n    /**\n     * @method _indexOfListener\n     * @param {Function} listener\n     * @return {number}\n     * @private\n     */\n    private _indexOfListener(listener, context):number {\n\n        var n:number = this._bindings.length;\n        var cur:SignalBinding;\n\n        while (n--) {\n            cur = this._bindings[n];\n\n            if (cur.getListener() === listener && cur.context === context) {\n                return n;\n            }\n        }\n\n        return -1;\n\n    }\n\n    /**\n     * Check if listener was attached to Signal.\n     * @param {Function} listener\n     * @param {Object} [context]\n     * @return {booleanean} if Signal has the specified listener.\n     */\n    public has(listener, context:any = null):boolean {\n\n        return this._indexOfListener(listener, context) !== -1;\n\n    }\n\n    /**\n     * Add a listener to the signal.\n     * @param {Function} listener Signal handler function.\n     * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent\n     * the `this` variable inside listener function).\n     * @param {Number} [priority] The priority level of the event listener. Listeners with higher priority will\n     * be executed before listeners with lower priority. Listeners with same priority level will be executed at\n     * the same order as they were added. (default = 0)\n     * @return {SignalBinding} An Object representing the binding between the Signal and listener.\n     */\n    public add(listener, listenerContext:any = null, priority:number = 0):SignalBinding {\n\n        this.validateListener(listener, 'add');\n\n        return this._registerListener(listener, false, listenerContext, priority);\n\n    }\n\n    /**\n     * Add listener to the signal that should be removed after first execution (will be executed only once).\n     * @param {Function} listener Signal handler function.\n     * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent\n     * the `this` variable inside listener function).\n     * @param {Number} [priority] The priority level of the event listener. Listeners with higher priority will be\n     * executed before listeners with lower priority. Listeners with same priority level will be executed at the\n     * same order as they were added. (default = 0)\n     * @return {SignalBinding} An Object representing the binding between the Signal and listener.\n     */\n    public addOnce(listener, listenerContext:any = null, priority:number = 0):SignalBinding {\n\n        this.validateListener(listener, 'addOnce');\n\n        return this._registerListener(listener, true, listenerContext, priority);\n\n    }\n\n    /**\n     * Remove a single listener from the dispatch queue.\n     * @param {Function} listener Handler function that should be removed.\n     * @param {Object} [context] Execution context (since you can add the same handler multiple times if executing\n     * in a different context).\n     * @return {Function} Listener handler function.\n     */\n    public remove(listener, context:any = null) {\n\n        this.validateListener(listener, 'remove');\n\n        var i:number = this._indexOfListener(listener, context);\n\n        if (i !== -1) {\n            this._bindings[i]._destroy(); //no reason to a mSignalBinding.SignalBinding exist if it isn't attached\n            // to a signal\n            this._bindings.splice(i, 1);\n        }\n\n        return listener;\n    }\n\n    /**\n     * Remove all listeners from the Signal.\n     */\n    public removeAll() {\n\n        var n:number = this._bindings.length;\n\n        while (n--) {\n            this._bindings[n]._destroy();\n        }\n        this._bindings.length = 0;\n    }\n\n    /**\n     * @return {number} Number of listeners attached to the Signal.\n     */\n    public getNumListeners():number {\n        return this._bindings.length;\n    }\n\n    /**\n     * Stop propagation of the event, blocking the dispatch to next listeners on the queue.\n     * <p><strong>IMPORTANT:</strong> should be called only during signal dispatch, calling it before/after dispatch\n     * won't affect signal broadcast.</p>\n     * @see Signal.prototype.disable\n     */\n    public halt() {\n        this._shouldPropagate = false;\n    }\n\n    /**\n     * Dispatch/Broadcast Signal to all listeners added to the queue.\n     * @param {...*} [params] Parameters that should be passed to each handler.\n     */\n    public dispatch(...paramsArr:any[]) {\n\n        if (!this.active) {\n            return;\n        }\n\n        var n:number = this._bindings.length;\n        var bindings:SignalBinding[];\n\n        if (this.memorize) {\n            this._prevParams = paramsArr;\n        }\n\n        if (!n) {\n            //should come after memorize\n            return;\n        }\n\n        bindings = this._bindings.slice(0); //clone array in case add/remove items during dispatch\n\n        this._shouldPropagate = true; //in case `halt` was called before dispatch or during the previous dispatch.\n\n        //execute all callbacks until end of the list or until a callback returns `false` or stops propagation\n        //reverse loop since listeners with higher priority will be added at the end of the list\n        do {\n            n--;\n        } while (bindings[n] && this._shouldPropagate && bindings[n].execute(paramsArr) !== false);\n\n    }\n\n    /**\n     * Forget memorized arguments.\n     * @see Signal.memorize\n     */\n    public forget() {\n\n        this._prevParams = null;\n\n    }\n\n    /**\n     * Remove all bindings from signal and destroy any reference to external objects (destroy Signal object).\n     * <p><strong>IMPORTANT:</strong> calling any method on the signal instance after calling dispose will\n     * throw errors.</p>\n     */\n    public dispose() {\n\n        this.removeAll();\n\n        delete this._bindings;\n        delete this._prevParams;\n\n    }\n\n    /**\n     * @return {string} String representation of the object.\n     */\n    public toString():string {\n\n        return '[Signal active:' + this.active + ' numListeners:' + this.getNumListeners() + ']';\n\n    }\n\n}","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n/*\n*\t@desc   \tAn object that represents a binding between a Signal and a listener function.\n*               Released under the MIT license\n*\t\t\t\thttp://millermedeiros.github.com/js-signals/\n*\n*\t@version\t1.0 - 7th March 2013\n*\n*\t@author \tRichard Davey, TypeScript conversion\n*\t@author\t\tMiller Medeiros, JS Signals\n*\t@author\t\tRobert Penner, AS Signals\n*\n*/\nimport {Signal} from './Signal';\n\nexport class SignalBinding {\n\n    /**\n     * Object that represents a binding between a Signal and a listener function.\n     * <br />- <strong>This is an internal constructor and shouldn't be called by regular users.</strong>\n     * <br />- inspired by Joa Ebert AS3 SignalBinding and Robert Penner's Slot classes.\n     * @author Miller Medeiros\n     * @constructor\n     * @internal\n     * @name SignalBinding\n     * @param {Signal} signal Reference to Signal object that listener is currently bound to.\n     * @param {Function} listener Handler function bound to the signal.\n     * @param {booleanean} isOnce If binding should be executed just once.\n     * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent\n     * the `this` variable inside listener function).\n     * @param {Number} [priority] The priority level of the event listener. (default = 0).\n     */\n    constructor(signal:Signal, listener, isOnce:boolean, listenerContext, priority:number = 0) {\n\n        this._listener = listener;\n        this._isOnce = isOnce;\n        this.context = listenerContext;\n        this._signal = signal;\n        this.priority = priority || 0;\n\n    }\n\n    /**\n     * Handler function bound to the signal.\n     * @type Function\n     * @private\n     */\n    private _listener;\n\n    /**\n     * If binding should be executed just once.\n     * @type booleanean\n     * @private\n     */\n    private _isOnce:boolean;\n\n    /**\n     * Context on which listener will be executed (object that should represent the `this` variable inside\n     * listener function).\n     * @memberOf SignalBinding.prototype\n     * @name context\n     * @type Object|undefined|null\n     */\n    public context;\n\n    /**\n     * Reference to Signal object that listener is currently bound to.\n     * @type Signal\n     * @private\n     */\n    private _signal:Signal;\n\n    /**\n     * Listener priority\n     * @type Number\n     */\n    public priority:number;\n\n    /**\n     * If binding is active and should be executed.\n     * @type booleanean\n     */\n    public active:boolean = true;\n\n    /**\n     * Default parameters passed to listener during `Signal.dispatch` and `SignalBinding.execute`.\n     * (curried parameters)\n     * @type Array|null\n     */\n    public params:any = null;\n\n    /**\n     * Call listener passing arbitrary parameters.\n     * <p>If binding was added using `Signal.addOnce()` it will be automatically removed from signal dispatch queue,\n     * this method is used internally for the signal dispatch.</p>\n     * @param {Array} [paramsArr] Array of parameters that should be passed to the listener\n     * @return {*} Value returned by the listener.\n     */\n    public execute(paramsArr?:any[]) {\n\n        var handlerReturn;\n        var params;\n\n        if (this.active && !!this._listener) {\n\n            params = this.params ? this.params.concat(paramsArr) : paramsArr;\n\n            handlerReturn = this._listener.apply(this.context, params);\n\n            if (this._isOnce) {\n                this.detach();\n            }\n        }\n\n        return handlerReturn;\n\n    }\n\n    /**\n     * Detach binding from signal.\n     * - alias to: mySignal.remove(myBinding.getListener());\n     * @return {Function|null} Handler function bound to the signal or `null` if binding was previously detached.\n     */\n    public detach() {\n\n        return this.isBound() ? this._signal.remove(this._listener, this.context) : null;\n\n    }\n\n    /**\n     * @return {boolean} `true` if binding is still bound to the signal and have a listener.\n     */\n    public isBound():boolean {\n\n        return (!!this._signal && !!this._listener);\n\n    }\n\n    /**\n     * @return {boolean} If SignalBinding will only be executed once.\n     */\n    public isOnce():boolean {\n\n        return this._isOnce;\n\n    }\n\n    /**\n     * @return {Function} Handler function bound to the signal.\n     */\n    public getListener() {\n\n        return this._listener;\n\n    }\n\n    /**\n     * @return {Signal} Signal that listener is currently bound to.\n     */\n    public getSignal() {\n\n        return this._signal;\n\n    }\n\n    /**\n     * Delete instance properties\n     * @private\n     */\n    public _destroy() {\n\n        delete this._signal;\n        delete this._listener;\n        delete this.context;\n\n    }\n\n    /**\n     * @return {string} String representation of the object.\n     */\n    public toString():string {\n\n        return '[SignalBinding isOnce:' + this._isOnce + ', isBound:' + this.isBound() + ', active:'\n            + this.active + ']';\n\n    }\n}"],"sourceRoot":"/source/"}