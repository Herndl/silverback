{"version":3,"sources":["silverback.min.js","node_modules/browser-pack/_prelude.js","src/core/ComponentMatchingFamily.ts","src/core/Engine.ts","src/core/EntityList.ts","src/core/NodeList.ts","src/core/NodePool.ts","src/core/SceneList.ts","src/core/SystemList.ts","src/index.ts","src/utils/Dictionary.ts","src/utils/Signal.ts","src/utils/SignalBinding.ts"],"names":[],"mappings":"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","file":"silverback.min.js","sourcesContent":[null,"(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n/**\n * The default class for managing a NodeList. This class creates the NodeList and adds and removes\n * nodes to/from the list as the entities and the components in the engine change.\n *\n * It uses the basic entity matching pattern of an entity system - entities are added to the list if\n * they contain components matching all the public properties of the node class.\n */\nimport {Node} from './Node';\nimport {NodePool} from './NodePool';\nimport {NodeList} from './NodeList';\nimport {Engine} from './Engine';\nimport {Entity} from './Entity';\nimport {IFamily} from './IFamily';\nimport {Dictionary} from '../utils/Dictionary';\n\nexport class ComponentMatchingFamily implements IFamily {\n    private _nodes:NodeList;\n    private _entities:Dictionary;\n    private _nodeClass;\n    private _components:Dictionary;\n    private _nodePool:NodePool;\n    private _engine:Engine;\n\n    /**\n     * The constructor. Creates a ComponentMatchingFamily to provide a NodeList for the\n     * given node class.\n     *\n     * @param nodeClass The type of node to create and manage a NodeList for.\n     * @param engine The engine that this family is managing teh NodeList for.\n     */\n    constructor(nodeClass, engine:Engine) {\n        this._nodeClass = nodeClass;\n        this._engine = engine;\n\n        this._nodes = new NodeList();\n        this._entities = new Dictionary();\n        this._components = new Dictionary();\n\n        var nodeClassPrototype = this._nodeClass.prototype;\n\n        for (var property in nodeClassPrototype) {\n            ///TODO - tidy this up...\n            if (nodeClassPrototype.hasOwnProperty(property) &&\n                property !== 'types' &&\n                property !== 'next' &&\n                property !== 'previous' &&\n                property !== 'constructor' &&\n                property !== 'super' &&\n                property !== 'extend' &&\n                property !== 'entity') {\n                var componentObject = nodeClassPrototype.types[property];\n                this._components.add(componentObject, property);\n            }\n        }\n\n        this._nodePool = new NodePool(this._nodeClass, this._components);\n        this._nodePool.dispose(this._nodePool.get());\n        /*this._nodeClass = nodeClass;\n         this._engine = engine;\n\n         this._nodePool = new silverback.core.NodePool(this._nodeClass);\n         this._nodes = new silverback.core.NodeList();\n         this._entities = new silverback.utils.Dictionary();\n\n         this._components = new silverback.utils.Dictionary();\n         this._nodePool.dispose(this._nodePool.get()); // create a dummy instance to ensure describeType works.\n\n         var nodeClassPrototype = this._nodeClass.prototype;\n\n         for (var property in nodeClassPrototype) {\n         ///TODO - tidy this up...\n         if (nodeClassPrototype.hasOwnProperty(property) &&\n         property !== 'types' &&\n         property !== 'next' &&\n         property !== 'previous' &&\n         property !== 'constructor' &&\n         property !== 'super' &&\n         property !== 'extend' &&\n         property !== 'entity') {\n         var componentObject = nodeClassPrototype.types[property];\n         this._components.add(componentObject, property);\n         }\n         }\n\n         this._init();*/\n    }\n\n    /**\n     * Initialises the class. Creates the nodelist and other tools. Analyses the node to determine\n     * what component types the node requires.\n     */\n    /*private _init()\n     {\n     }*/\n\n    /**\n     * The nodelist managed by this family. This is a reference that remains valid always\n     * since it is retained and reused by Systems that use the list. i.e. we never recreate the list,\n     * we always modify it in place.\n     */\n    public get nodeList():NodeList {\n        return this._nodes;\n    }\n\n    /**\n     * Called by the engine when an entity has been added to it. We check if the entity should be in\n     * this family's NodeList and add it if appropriate.\n     */\n    public newEntity(entity:Entity) {\n        this.addIfMatch(entity);\n    }\n\n    /**\n     * Called by the engine when a component has been added to an entity. We check if the entity is not in\n     * this family's NodeList and should be, and add it if appropriate.\n     */\n    public componentAddedToEntity(entity:Entity, componentClass:() => any) {\n        this.addIfMatch(entity);\n    }\n\n    /**\n     * Called by the engine when a component has been removed from an entity. We check if the removed component\n     * is required by this family's NodeList and if so, we check if the entity is in this this NodeList and\n     * remove it if so.\n     */\n    public componentRemovedFromEntity(entity:Entity, componentClass:() => any) {\n        if (this._components.has(componentClass)) {\n            this.removeIfMatch(entity);\n        }\n    }\n\n    /**\n     * Called by the engine when an entity has been rmoved from it. We check if the entity is in\n     * this family's NodeList and remove it if so.\n     */\n    public removeEntity(entity:Entity) {\n        this.removeIfMatch(entity);\n    }\n\n    /**\n     * If the entity is not in this family's NodeList, tests the components of the entity to see\n     * if it should be in this NodeList and adds it if so.\n     */\n    public addIfMatch(entity:Entity) {\n        if (!this._entities.has(entity)) {\n            var componentClass;\n            if (\n                !this._components.forEach(function (componentClass, componentName) {\n                    if (!entity.has(componentClass)) {\n                        return 'return';\n                    }\n                })\n            ) {\n                return;\n            }\n            var node = this._nodePool.get();\n            node.entity = entity;\n            this._components.forEach(function (componentClass, componentName) {\n                node[componentName] = entity.get(componentClass);\n            });\n            this._entities.add(entity, node);\n            entity.componentRemoved.add(this.componentRemovedFromEntity, this);\n            this._nodes.add(node);\n        }\n        /*if (!this._entities.getValue(entity))\n         {\n         var componentClass : any;\n         for (componentClass in this._components )\n         {\n         if ( !entity.has( componentClass ) )\n         {\n         return;\n         }\n         }\n         var node: silverback.core.Node = this._nodePool.get();\n         node.entity = entity;\n         for (componentClass in this._components )\n         {\n         node[this._components[componentClass]] = entity.get( componentClass );\n         }\n         this._entities.add(entity, node);\n         this._nodes.add( node );\n         }*/\n    }\n\n    /**\n     * Removes the entity if it is in this family's NodeList.\n     */\n    public removeIfMatch(entity:Entity) {\n        if (this._entities.getValue(entity)) {\n            var node:Node = this._entities.getValue(entity);\n            this._entities.remove(entity);\n            this._nodes.remove(node);\n            if (this._engine.updating) {\n                this._nodePool.cache(node);\n                this._engine.updateComplete.add(this._releaseNodePoolCache, this);\n            } else {\n                this._nodePool.dispose(node);\n            }\n        }\n    }\n\n    /**\n     * Releases the nodes that were added to the node pool during this engine update, so they can\n     * be reused.\n     */\n    private _releaseNodePoolCache() {\n        this._engine.updateComplete.remove(this._releaseNodePoolCache);\n        this._nodePool.releaseCache();\n    }\n\n    /**\n     * Removes all nodes from the NodeList.\n     */\n    public cleanUp() {\n        for (var node:Node = this._nodes.head; node; node = node.next) {\n            this._entities.remove(node.entity);\n        }\n        this._nodes.removeAll();\n    }\n}","/*\n * Engine\n * Visit http://www.silverbackengine.org for documentation, updates and examples.\n *\n * Copyright (c) 2015 Gorillabyte\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/// <reference path=\"../../typings/tsd.d.ts\" />\n\n/**\n * The Engine class is the central point for creating and managing your game state. Add\n * entities and systems to the engine, and fetch families of nodes from the engine.\n */\nimport {Entity} from './Entity';\nimport {EntityList} from './EntityList';\nimport {Scene} from './Scene';\nimport {SceneList} from './SceneList';\nimport {SystemList} from './SystemList';\nimport {NodeList} from './NodeList';\nimport {Dictionary} from '../utils/Dictionary';\nimport {Signal} from '../utils/Signal';\nimport {IFamily} from './IFamily';\nimport {System} from './System';\nimport {ComponentMatchingFamily} from './ComponentMatchingFamily';\n\nexport class Engine {\n\n    private _entityList:EntityList;\n    private _sceneList:SceneList;\n    private _systemList:SystemList;\n    private _families:Dictionary;\n\n    /**\n     * Indicates if the engine is currently in its update loop.\n     */\n    public updating:boolean;\n\n    /**\n     * Dispatched when the update loop ends. If you want to add and remove systems from the\n     * engine it is usually best not to do so during the update loop. To avoid this you can\n     * listen for this signal and make the change when the signal is dispatched.\n     */\n    public updateComplete:Signal;\n\n    /**\n     * The class used to manage node lists. In most cases the default class is sufficient\n     * but it is exposed here so advanced developers can choose to create and use a\n     * different implementation.\n     *\n     * The class must implement the Family interface.\n     */\n    public familyClass = ComponentMatchingFamily;\n\n    constructor() {\n        this._entityList = new EntityList();\n        this._sceneList = new SceneList();\n        this._systemList = new SystemList();\n        this._families = new Dictionary();\n        this.updateComplete = new Signal();\n    }\n\n    public get entites():any {\n        var tmpEntities = [];\n        for(var entity = this._entityList.head; entity; entity = entity.next) {\n            tmpEntities.push(entity);\n        }\n        return tmpEntities;\n    }\n\n    public get scenes():any {\n        var tmpScenes = [];\n        for(var scene = this._sceneList.head; scene; scene = scene.next) {\n            tmpScenes.push(scene);\n        }\n        return tmpScenes;\n    }\n\n    public get systems():any {\n        var tmpSystems = [];\n        for (var system = this._systemList.head; system; system = system.next) {\n            tmpSystems.push(system);\n        }\n        return tmpSystems;\n    }\n\n    /**\n     * Add an entity to the engine.\n     *\n     * @param entity The entity to add.\n     */\n    public addEntity(entity:Entity):void {\n        this._entityList.add( entity );\n        entity.componentAdded.add(this._componentAdded, this);\n        entity.componentRemoved.add(this._componentRemoved, this);\n        this._families.forEach(\n            (nodeObject, family:IFamily) => {\n                family.newEntity(entity);\n            }\n        );\n    }\n\n    /**\n     * Remove an entity from the engine.\n     *\n     * @param entity The entity to remove.\n     */\n    public removeEntity(entity: Entity):void {\n        entity.componentAdded.remove(this._componentAdded, this);\n        entity.componentRemoved.remove(this._componentRemoved, this);\n\n        this._families.forEach(\n            function (nodeObject, family: IFamily) {\n                family.removeEntity(entity);\n            }\n        );\n\n        this._entityList.remove( entity );\n    }\n\n    /**\n     * Remove all entities from the engine.\n     */\n    public removeAllEntities():void {\n        while (this._entityList.head) {\n            this.removeEntity(this._entityList.head);\n        }\n    }\n\n    /**\n     * Add an scene to the engine.\n     *\n     * @param scene The entity to add.\n     */\n    public addScene(scene:Scene):void {\n        this._sceneList.add( scene );\n       /* scene.entityAdded.add(this._entityAdded, this);\n        scene.entityRemoved.add(this._entityRemoved, this);*/\n    }\n\n    /**\n     * Remove an entity from the engine.\n     *\n     * @param scene The scene to remove.\n     */\n    public removeScene(scene:Scene):void {\n        /*scene.entityAdded.remove(this._entityAdded, this);\n        scene.entityRemoved.remove(this._entityRemoved, this);*/\n\n        this._sceneList.remove( scene );\n    }\n\n    /**\n     * Remove all entities from the engine.\n     */\n    public removeAllScenes():void {\n        while (this._sceneList.head) {\n            this.removeScene(this._sceneList.head);\n        }\n    }\n\n    public getScene(type):Scene {\n        return this._sceneList.get(type);\n    }\n\n    /**\n     * @private\n     */\n    private _componentAdded(entity: Entity, componentClass:() => any):void {\n        this._families.forEach(\n            function (nodeObject, family:IFamily) {\n                family.componentAddedToEntity(entity, componentClass);\n            }\n        );\n    }\n\n    /**\n     * @private\n     */\n    private _componentRemoved(entity: Entity, componentClass:() => any):void {\n        this._families.forEach(\n            function (nodeObject, family:IFamily) {\n                family.componentRemovedFromEntity(entity, componentClass);\n            }\n        );\n    }\n\n    /**\n     * Get a collection of nodes from the engine, based on the type of the node required.\n     *\n     * <p>The engine will create the appropriate NodeList if it doesn't already exist and\n     * will keep its contents up to date as entities are added to and removed from the\n     * engine.</p>\n     *\n     * <p>If a NodeList is no longer required, release it with the releaseNodeList method.</p>\n     *\n     * @param nodeClass The type of node required.\n     * @return A linked list of all nodes of this type from all entities in the engine.\n     */\n    public getNodeList(nodeClass):NodeList {\n        if(this._families.has(nodeClass)) {\n            return this._families.getValue(nodeClass)._nodes;\n        }\n        var family:IFamily = new this.familyClass(nodeClass, this);\n        this._families.add(nodeClass, family);\n        for (var entity:Entity = this._entityList.head; entity; entity = entity.next) {\n            family.newEntity(entity);\n        }\n        return family.nodeList;\n    }\n\n    /**\n     * If a NodeList is no longer required, this method will stop the engine updating\n     * the list and will release all references to the list within the framework\n     * classes, enabling it to be garbage collected.\n     *\n     * <p>It is not essential to release a list, but releasing it will free\n     * up memory and processor resources.</p>\n     *\n     * @param nodeClass The type of the node class if the list to be released.\n     */\n    public releaseNodeList(nodeClass) {\n        if (this._families.has(nodeClass)) {\n            this._families.getValue(nodeClass).cleanUp();\n        }\n        this._families.remove(nodeClass);\n    }\n\n    /**\n     * Add a system to the engine, and set its priority for the order in which the\n     * systems are updated by the engine update loop.\n     *\n     * <p>The priority dictates the order in which the systems are updated by the engine update\n     * loop. Lower numbers for priority are updated first. i.e. a priority of 1 is\n     * updated before a priority of 2.</p>\n     *\n     * @param system The system to add to the engine.\n     * @param priority The priority for updating the systems during the engine loop. A\n     * lower number means the system is updated sooner.\n     */\n    public addSystem(system:System, priority:number) {\n        system.priority = priority;\n        system.addToEngine( this );\n        this._systemList.add( system );\n    }\n\n    /**\n     * Get the system instance of a particular type from within the engine.\n     *\n     * @param type The type of system\n     * @return The instance of the system type that is in the engine, or\n     * null if no systems of this type are in the engine.\n     */\n    public getSystem(type):System {\n        return this._systemList.get( type );\n    }\n\n    /**\n     * Returns a vector containing all the systems in the engine.\n     */\n    //public get systems() : Vector.<System>\n    //{\n    //\tvar systems : Vector.<System> = new Vector.<System>();\n    //\tfor (var system: MSystem.ash.core.System = systemList.head; system; system = system.next )\n    //\t{\n    //\t\tsystems.push( system );\n    //\t}\n    //\treturn systems;\n    //}\n\n    /**\n     * Remove a system from the engine.\n     *\n     * @param system The system to remove from the engine.\n     */\n    public removeSystem(system:System) {\n        this._systemList.remove( system );\n        system.removeFromEngine( this );\n    }\n\n    /**\n     * Remove all systems from the engine.\n     */\n    public removeAllSystems() {\n        while( this._systemList.head ) {\n            this.removeSystem(this._systemList.head );\n        }\n    }\n\n    /**\n     * Update the engine. This causes the engine update loop to run, calling update on all the\n     * systems in the engine.\n     *\n     * @time The duration, in seconds, of this update step.\n     */\n    public update(time:number) {\n        this.updating = true;\n        for (var system:System = this._systemList.head; system; system = system.next) {\n            system.update(time);\n        }\n        this.updating = false;\n        this.updateComplete.dispatch();\n    }\n}","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n/**\n * An export class for a linked list of entities. Used inside the framework for\n * managing the entities.\n */\n\nimport {Entity} from './Entity';\n\nexport class EntityList {\n\n    public head:Entity;\n    public tail:Entity;\n\n    public add(entity:Entity) {\n        if (!this.head) {\n            this.head = this.tail = entity;\n            entity.next = entity.previous = null;\n        } else {\n            this.tail.next = entity;\n            entity.previous = this.tail;\n            entity.next = null;\n            this.tail = entity;\n        }\n    }\n\n    public remove(entity:Entity) {\n        if (this.head === entity) {\n            this.head = this.head.next;\n        }\n        if (this.tail === entity) {\n            this.tail = this.tail.previous;\n        }\n\n        if (entity.previous) {\n            entity.previous.next = entity.next;\n        }\n\n        if (entity.next) {\n            entity.next.previous = entity.previous;\n        }\n        // N.B. Don't set node.next and node.previous to null because that will break the list iteration if node is\n        // the current node in the iteration.\n    }\n\n    private _removeAll() {\n        while (this.head) {\n            var entity:Entity = this.head;\n            this.head = this.head.next;\n            entity.previous = null;\n            entity.next = null;\n        }\n        this.tail = null;\n    }\n}","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n\n/**\n * A collection of nodes.\n *\n * <p>Systems within the engine access the components of entities via NodeLists. A NodeList contains\n * a node for each Entity in the engine that has all the components required by the node. To iterate\n * over a NodeList, start from the head and step to the next on each loop, until the returned value\n * is null.</p>\n *\n * <p>for( var node : Node = nodeList.head; node; node = node.next )\n * {\n\t *   // do stuff\n\t * }</p>\n *\n * <p>It is safe to remove items from a nodelist during the loop. When a Node is removed form the\n * NodeList it's previous and next properties still point to the nodes that were before and after\n * it in the NodeList just before it was removed.</p>\n */\n\nimport {Node} from './Node';\nimport {Signal} from '../utils/Signal';\n\nexport class NodeList {\n    /**\n     * The first item in the node list, or null if the list contains no nodes.\n     */\n    public head:any = null;\n    /**\n     * The last item in the node list, or null if the list contains no nodes.\n     */\n    public tail:any = null;\n\n    /**\n     * A signal that is dispatched whenever a node is added to the node list.\n     *\n     * <p>The signal will pass a single parameter to the listeners - the node that was added.</p>\n     */\n    public nodeAdded:Signal;\n    /**\n     * A signal that is dispatched whenever a node is removed from the node list.\n     *\n     * <p>The signal will pass a single parameter to the listeners - the node that was removed.</p>\n     */\n    public nodeRemoved:Signal;\n\n    constructor() {\n        this.nodeAdded = new Signal();\n        this.nodeRemoved = new Signal();\n    }\n\n    public add(node:Node):void {\n        if (!this.head) {\n            this.head = this.tail = node;\n            node.next = node.previous = null;\n        } else {\n            this.tail.next = node;\n            node.previous = this.tail;\n            node.next = null;\n            this.tail = node;\n        }\n        this.nodeAdded.dispatch(node);\n    }\n\n    public remove(node:Node) {\n        if (this.head === node) {\n            this.head = this.head.next;\n        }\n        if (this.tail === node) {\n            this.tail = this.tail.previous;\n        }\n        if (node.previous) {\n            node.previous.next = node.next;\n        }\n        if (node.next) {\n            node.next.previous = node.previous;\n        }\n        this.nodeRemoved.dispatch(node);\n        // N.B. Don't set node.next and node.previous to null because that will break the list iteration if node is\n        // the current node in the iteration.\n    }\n\n    public removeAll() {\n        while (this.head) {\n            var node:Node = this.head;\n            this.head = node.next;\n            node.previous = null;\n            node.next = null;\n            this.nodeRemoved.dispatch(node);\n        }\n        this.tail = null;\n    }\n\n    /**\n     * true if the list is empty, false otherwise.\n     */\n    public empty():boolean {\n        return this.head === null;\n    }\n\n    /**\n     * Swaps the positions of two nodes in the list. Useful when sorting a list.\n     */\n    public swap(node1:Node, node2:Node) {\n        if (node1.previous === node2) {\n            node1.previous = node2.previous;\n            node2.previous = node1;\n            node2.next = node1.next;\n            node1.next = node2;\n        } else if (node2.previous === node1) {\n            node2.previous = node1.previous;\n            node1.previous = node2;\n            node1.next = node2.next;\n            node2.next = node1;\n        } else {\n            var temp:Node = node1.previous;\n            node1.previous = node2.previous;\n            node2.previous = temp;\n            temp = node1.next;\n            node1.next = node2.next;\n            node2.next = temp;\n        }\n\n        if (this.head === node1) {\n            this.head = node2;\n        } else if (this.head === node2) {\n            this.head = node1;\n        }\n        if (this.tail === node1) {\n            this.tail = node2;\n        } else if (this.tail === node2) {\n            this.tail = node1;\n        }\n\n        if (node1.previous) {\n            node1.previous.next = node1;\n        }\n        if (node2.previous) {\n            node2.previous.next = node2;\n        }\n        if (node1.next) {\n            node1.next.previous = node1;\n        }\n        if (node2.next) {\n            node2.next.previous = node2;\n        }\n    }\n\n    /**\n     * Performs an insertion sort on the node list. In general, insertion sort is very efficient with short lists\n     * and with lists that are mostly sorted, but is inefficient with large lists that are randomly ordered.\n     *\n     * <p>The sort function takes two nodes and returns a Number.</p>\n     *\n     * <p><code>function sortFunction( node1 : MockNode, node2 : MockNode ) :number</code></p>\n     *\n     * <p>If the returned number is less than zero, the first node should be before the second. If it is greater\n     * than zero the second node should be before the first. If it is zero the order of the nodes doesn't matter\n     * and the original order will be retained.</p>\n     *\n     * <p>This insertion sort implementation runs in place so no objects are created during the sort.</p>\n     */\n    public insertionSort(sortFunction) {\n        if (this.head === this.tail) {\n            return;\n        }\n        var remains:Node = this.head.next;\n        for (var node:Node = remains; node; node = remains) {\n            remains = node.next;\n            for (var other:Node = node.previous; other; other = other.previous) {\n                if (sortFunction(node, other) >= 0) {\n                    // move node to after other\n                    if (node !== other.next) {\n                        // remove from place\n                        if (this.tail === node) {\n                            this.tail = node.previous;\n                        }\n                        node.previous.next = node.next;\n                        if (node.next) {\n                            node.next.previous = node.previous;\n                        }\n                        // insert after other\n                        node.next = other.next;\n                        node.previous = other;\n                        node.next.previous = node;\n                        other.next = node;\n                    }\n                    break; // exit the inner for loop\n                }\n            }\n            if (!other) { // the node belongs at the start of the list\n                // remove from place\n                if (this.tail === node) {\n                    this.tail = node.previous;\n                }\n                node.previous.next = node.next;\n                if (node.next) {\n                    node.next.previous = node.previous;\n                }\n                // insert at head\n                node.next = this.head;\n                this.head.previous = node;\n                node.previous = null;\n                this.head = node;\n            }\n        }\n    }\n\n    /**\n     * Performs a merge sort on the node list. In general, merge sort is more efficient than insertion sort\n     * with long lists that are very unsorted.\n     *\n     * <p>The sort function takes two nodes and returns a Number.</p>\n     *\n     * <p><code>function sortFunction( node1 : MockNode, node2 : MockNode ) :number</code></p>\n     *\n     * <p>If the returned number is less than zero, the first node should be before the second. If it is greater\n     * than zero the second node should be before the first. If it is zero the order of the nodes doesn't matter.</p>\n     *\n     * <p>This merge sort implementation creates and uses a single Vector during the sort operation.</p>\n     */\n    public mergeSort(sortFunction) {\n        if (this.head === this.tail) {\n            return;\n        }\n        //var lists: Vector.<Node> = new Vector.< Node >;\n        var lists:any;\n        // disassemble the list\n        var start:Node = this.head;\n        var end:Node;\n        while (start) {\n            end = start;\n            while (end.next && sortFunction(end, end.next) <= 0) {\n                end = end.next;\n            }\n            var next:Node = end.next;\n            start.previous = end.next = null;\n            lists.push(start);\n            start = next;\n        }\n        // reassemble it in order\n        while (lists.length > 1) {\n            //TODO VECTOR CLASS\n            //lists.push( merge( lists.shift(), lists.shift(), sortFunction ) );\n        }\n        // find the tail\n        this.tail = this.head = lists[0];\n        while (this.tail.next) {\n            this.tail = this.tail.next;\n        }\n    }\n\n    private _merge(head1:Node, head2:Node, sortFunction):Node {\n        var node:Node;\n        var head:Node;\n        if (sortFunction(head1, head2) <= 0) {\n            head = node = head1;\n            head1 = head1.next;\n        } else {\n            head = node = head2;\n            head2 = head2.next;\n        }\n        while (head1 && head2) {\n            if (sortFunction(head1, head2) <= 0) {\n                node.next = head1;\n                head1.previous = node;\n                node = head1;\n                head1 = head1.next;\n            } else {\n                node.next = head2;\n                head2.previous = node;\n                node = head2;\n                head2 = head2.next;\n            }\n        }\n        if (head1) {\n            node.next = head1;\n            head1.previous = node;\n        } else {\n            node.next = head2;\n            head2.previous = node;\n        }\n        return head;\n    }\n}","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n/**\n * This export class maintains a pool of deleted nodes for reuse by the framework. This reduces the overhead\n * from object creation and garbage collection.\n *\n * Because nodes may be deleted from a NodeList while in use, by deleting Nodes from a NodeList\n * while iterating through the NodeList, the pool also maintains a cache of nodes that are added to the pool\n * but should not be reused yet. They are then released into the pool by calling the releaseCache method.\n */\nimport {Node} from './Node';\n\nexport class NodePool {\n    private _tail:Node;\n    private _nodeClass;\n    private _cacheTail:Node;\n    private _components;\n\n    /**\n     * Creates a pool for the given node class.\n     */\n    constructor(nodeClass, components) {\n        this._nodeClass = nodeClass;\n        this._components = components;\n    }\n\n    /**\n     * Fetches a node from the pool.\n     */\n    public get() {\n        if (this._tail) {\n            var node = this._tail;\n            this._tail = this._tail.previous;\n            node.previous = null;\n            return node;\n        } else {\n            var newNode = new this._nodeClass;\n            return newNode;\n        }\n    }\n\n    /**\n     * Adds a node to the pool.\n     */\n    public dispose(node:Node) {\n        this._components.forEach(function (componentClass, componentName) {\n            node[componentName] = null;\n        });\n        node.entity = null;\n        node.next = null;\n        node.previous = this._tail;\n        this._tail = node;\n    }\n\n    /**\n     * Adds a node to the cache\n     */\n    public cache(node:Node) {\n        node.previous = this._cacheTail;\n        this._cacheTail = node;\n    }\n\n    /**\n     * Releases all nodes from the cache into the pool\n     */\n    public releaseCache() {\n        while (this._cacheTail) {\n            var node:Node = this._cacheTail;\n            this._cacheTail = node.previous;\n            node.next = null;\n            node.previous = this._tail;\n            this._tail = node;\n        }\n    }\n}","/// <reference path=\"../../typings/tsd.d.ts\" />\n\nimport {Scene} from './Scene';\n\nexport class SceneList {\n    public head:Scene;\n    public tail:Scene;\n\n    public add(scene:Scene) {\n        if (!this.head) {\n            this.head = this.tail = scene;\n            scene.next = scene.previous = null;\n        } else {\n            this.tail.next = scene;\n            scene.previous = this.tail;\n            scene.next = null;\n            this.tail = scene;\n        }\n    }\n\n    public remove(scene:Scene) {\n        if (this.head === scene) {\n            this.head = this.head.next;\n        }\n        if (this.tail === scene) {\n            this.tail = this.tail.previous;\n        }\n\n        if (scene.previous) {\n            scene.previous.next = scene.next;\n        }\n\n        if (scene.next) {\n            scene.next.previous = scene.previous;\n        }\n    }\n\n    private _removeAll() {\n        while (this.head) {\n            var scene:Scene = this.head;\n            this.head = this.head.next;\n            scene.previous = null;\n            scene.next = null;\n        }\n        this.tail = null;\n    }\n\n    public get(type):Scene {\n        for (var scene = this.head; scene; scene = scene.next) {\n            if (scene.is(type)) {\n                return scene;\n            }\n        }\n        return null;\n    }\n}","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n/**\n * Used internally, this is an ordered list of Systems for use by the engine update loop.\n */\n\nimport {System} from './System';\n\nexport class SystemList {\n\n    public head:System;\n    public tail:System;\n\n    public add(system:System) {\n        if (!this.head) {\n            this.head = this.tail = system;\n            system.next = system.previous = null;\n        } else {\n            for (var node = this.tail; node; node = node.previous) {\n                if (node.priority <= system.priority) {\n                    break;\n                }\n            }\n            if (node === this.tail) {\n                this.tail.next = system;\n                system.previous = this.tail;\n                system.next = null;\n                this.tail = system;\n            } else if (!node) {\n                system.next = this.head;\n                system.previous = null;\n                this.head.previous = system;\n                this.head = system;\n            } else {\n                system.next = node.next;\n                system.previous = node;\n                node.next.previous = system;\n                node.next = system;\n            }\n        }\n    }\n\n    public remove(system:System) {\n        if (this.head === system) {\n            this.head = this.head.next;\n        }\n        if (this.tail === system) {\n            this.tail = this.tail.previous;\n        }\n\n        if (system.previous) {\n            system.previous.next = system.next;\n        }\n\n        if (system.next) {\n            system.next.previous = system.previous;\n        }\n    }\n\n    public removeAll() {\n        while (this.head) {\n            var system = this.head;\n            this.head = this.head.next;\n            system.previous = null;\n            system.next = null;\n        }\n        this.tail = null;\n    }\n\n    public get(type):System {\n        for (var system = this.head; system; system = system.next) {\n            if (system.is(type)) {\n                return system;\n            }\n        }\n        return null;\n    }\n}","export {Engine} from './core/Engine';\n/*export * from './core/Scene';\nexport * from './core/System';\nexport * from './core/Entity';\nexport * from './core/Node';*/\n","/// <reference path=\"../../typings/tsd.d.ts\" />\n\nexport class Dictionary {\n\n    private _keys: any[];\n    private _values: any[];\n\n    constructor() {\n        this._keys = [];\n        this._values = [];\n    }\n\n    public add(key, value) {\n        var keyIndex = this.getIndex(key);\n        if (keyIndex >= 0) {\n            this._values[keyIndex] = value;\n        } else {\n            this._keys.push(key);\n            this._values.push(value);\n        }\n    }\n\n    public remove(key): any {\n        var keyIndex = this.getIndex(key);\n        if (keyIndex >= 0) {\n            var removedValue = this._values[keyIndex];\n            this._keys.splice(keyIndex, 1);\n            this._values.splice(keyIndex, 1);\n            return removedValue;\n        } else {\n            throw 'Key does not exist';\n        }\n    }\n\n    public getValue(key) {\n        var value = null;\n        var keyIndex = this.getIndex(key);\n        if (keyIndex >= 0) {\n            value = this._values[keyIndex];\n        }\n        return value;\n    }\n\n    public getIndex(testKey) {\n        var i = 0,\n            len = this._keys.length,\n            key;\n        for (; i < len; ++i) {\n            key = this._keys[i];\n            if (key === testKey) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    public has(testKey) {\n        var i = 0,\n            len = this._keys.length,\n            key;\n        for (i; i < len; ++i) {\n            key = this._keys[i];\n            if (key === testKey) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public values(): any[] {\n        var i = 0,\n            len = this._keys.length,\n            key,\n            value;\n        var arValue: any[] = [];\n\n        for (; i < len; ++i) {\n            key = this._keys[i];\n            value = this._values[i];\n            arValue.push(value);\n        }\n        return arValue;\n    }\n\n    public forEach(action) {\n        var i = 0,\n            len = this._keys.length,\n            key,\n            value;\n\n        for (; i < len; ++i) {\n            key = this._keys[i];\n            value = this._values[i];\n            var breakHere = action(key, value);\n            if (breakHere === 'return') {\n                return false;\n            }\n        }\n        return true;\n    }\n}","/// <reference path=\"../../typings/tsd.d.ts\" />\n\nimport {SignalBinding} from './SignalBinding';\n\nexport class Signal {\n\n    /**\n     * @property _bindings\n     * @type Array\n     * @private\n     */\n    private _bindings:SignalBinding[] = [];\n\n    /**\n     * @property _prevParams\n     * @type Any\n     * @private\n     */\n    private _prevParams = null;\n\n    /**\n     * Signals Version Number\n     * @property VERSION\n     * @type String\n     * @const\n     */\n    public static VERSION:string = '1.0.0';\n\n    /**\n     * If Signal should keep record of previously dispatched parameters and\n     * automatically execute listener during `add()`/`addOnce()` if Signal was\n     * already dispatched before.\n     * @type booleanean\n     */\n    public memorize:boolean = false;\n\n    /**\n     * @type booleanean\n     * @private\n     */\n    private _shouldPropagate:boolean = true;\n\n    /**\n     * If Signal is active and should broadcast events.\n     * <p><strong>IMPORTANT:</strong> Setting this property during a dispatch will only affect the next dispatch,\n     * if you want to stop the propagation of a signal use `halt()` instead.</p>\n     * @type booleanean\n     */\n    public active:boolean = true;\n\n    /**\n     * @method validateListener\n     * @param {Any} listener\n     * @param {Any} fnName\n     */\n    public validateListener(listener, fnName) {\n\n        if (typeof listener !== 'function') {\n            throw new Error('listener is a required param of {fn}() and should be a Function.'\n                .replace('{fn}', fnName));\n        }\n\n    }\n\n    /**\n     * @param {Function} listener\n     * @param {booleanean} isOnce\n     * @param {Object} [listenerContext]\n     * @param {Number} [priority]\n     * @return {mSignalBinding.SignalBinding}\n     * @private\n     */\n    private _registerListener(listener, isOnce:boolean, listenerContext, priority:number):SignalBinding {\n\n        var prevIndex:number = this._indexOfListener(listener, listenerContext);\n        var binding:SignalBinding;\n\n        if (prevIndex !== -1) {\n            binding = this._bindings[prevIndex];\n\n            if (binding.isOnce() !== isOnce) {\n                throw new Error('You cannot add' + (isOnce ? '' : 'Once') + '() then add' + (!isOnce ? '' : 'Once')\n                    + '() the same listener without removing the relationship first.');\n            }\n        } else {\n            binding = new SignalBinding(this, listener, isOnce, listenerContext, priority);\n\n            this._addBinding(binding);\n        }\n\n        if (this.memorize && this._prevParams) {\n            binding.execute(this._prevParams);\n        }\n\n        return binding;\n\n    }\n\n    /**\n     * @method _addBinding\n     * @param {mSignalBinding.SignalBinding} binding\n     * @private\n     */\n    private _addBinding(binding:SignalBinding) {\n\n        //simplified insertion sort\n\n        var n:number = this._bindings.length;\n\n        do {\n            --n;\n        } while (this._bindings[n] && binding.priority <= this._bindings[n].priority);\n\n        this._bindings.splice(n + 1, 0, binding);\n\n    }\n\n    /**\n     * @method _indexOfListener\n     * @param {Function} listener\n     * @return {number}\n     * @private\n     */\n    private _indexOfListener(listener, context):number {\n\n        var n:number = this._bindings.length;\n        var cur:SignalBinding;\n\n        while (n--) {\n            cur = this._bindings[n];\n\n            if (cur.getListener() === listener && cur.context === context) {\n                return n;\n            }\n        }\n\n        return -1;\n\n    }\n\n    /**\n     * Check if listener was attached to Signal.\n     * @param {Function} listener\n     * @param {Object} [context]\n     * @return {booleanean} if Signal has the specified listener.\n     */\n    public has(listener, context:any = null):boolean {\n\n        return this._indexOfListener(listener, context) !== -1;\n\n    }\n\n    /**\n     * Add a listener to the signal.\n     * @param {Function} listener Signal handler function.\n     * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent\n     * the `this` variable inside listener function).\n     * @param {Number} [priority] The priority level of the event listener. Listeners with higher priority will\n     * be executed before listeners with lower priority. Listeners with same priority level will be executed at\n     * the same order as they were added. (default = 0)\n     * @return {SignalBinding} An Object representing the binding between the Signal and listener.\n     */\n    public add(listener, listenerContext:any = null, priority:number = 0):SignalBinding {\n\n        this.validateListener(listener, 'add');\n\n        return this._registerListener(listener, false, listenerContext, priority);\n\n    }\n\n    /**\n     * Add listener to the signal that should be removed after first execution (will be executed only once).\n     * @param {Function} listener Signal handler function.\n     * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent\n     * the `this` variable inside listener function).\n     * @param {Number} [priority] The priority level of the event listener. Listeners with higher priority will be\n     * executed before listeners with lower priority. Listeners with same priority level will be executed at the\n     * same order as they were added. (default = 0)\n     * @return {SignalBinding} An Object representing the binding between the Signal and listener.\n     */\n    public addOnce(listener, listenerContext:any = null, priority:number = 0):SignalBinding {\n\n        this.validateListener(listener, 'addOnce');\n\n        return this._registerListener(listener, true, listenerContext, priority);\n\n    }\n\n    /**\n     * Remove a single listener from the dispatch queue.\n     * @param {Function} listener Handler function that should be removed.\n     * @param {Object} [context] Execution context (since you can add the same handler multiple times if executing\n     * in a different context).\n     * @return {Function} Listener handler function.\n     */\n    public remove(listener, context:any = null) {\n\n        this.validateListener(listener, 'remove');\n\n        var i:number = this._indexOfListener(listener, context);\n\n        if (i !== -1) {\n            this._bindings[i]._destroy(); //no reason to a mSignalBinding.SignalBinding exist if it isn't attached\n            // to a signal\n            this._bindings.splice(i, 1);\n        }\n\n        return listener;\n    }\n\n    /**\n     * Remove all listeners from the Signal.\n     */\n    public removeAll() {\n\n        var n:number = this._bindings.length;\n\n        while (n--) {\n            this._bindings[n]._destroy();\n        }\n        this._bindings.length = 0;\n    }\n\n    /**\n     * @return {number} Number of listeners attached to the Signal.\n     */\n    public getNumListeners():number {\n        return this._bindings.length;\n    }\n\n    /**\n     * Stop propagation of the event, blocking the dispatch to next listeners on the queue.\n     * <p><strong>IMPORTANT:</strong> should be called only during signal dispatch, calling it before/after dispatch\n     * won't affect signal broadcast.</p>\n     * @see Signal.prototype.disable\n     */\n    public halt() {\n        this._shouldPropagate = false;\n    }\n\n    /**\n     * Dispatch/Broadcast Signal to all listeners added to the queue.\n     * @param {...*} [params] Parameters that should be passed to each handler.\n     */\n    public dispatch(...paramsArr:any[]) {\n\n        if (!this.active) {\n            return;\n        }\n\n        var n:number = this._bindings.length;\n        var bindings:SignalBinding[];\n\n        if (this.memorize) {\n            this._prevParams = paramsArr;\n        }\n\n        if (!n) {\n            //should come after memorize\n            return;\n        }\n\n        bindings = this._bindings.slice(0); //clone array in case add/remove items during dispatch\n\n        this._shouldPropagate = true; //in case `halt` was called before dispatch or during the previous dispatch.\n\n        //execute all callbacks until end of the list or until a callback returns `false` or stops propagation\n        //reverse loop since listeners with higher priority will be added at the end of the list\n        do {\n            n--;\n        } while (bindings[n] && this._shouldPropagate && bindings[n].execute(paramsArr) !== false);\n\n    }\n\n    /**\n     * Forget memorized arguments.\n     * @see Signal.memorize\n     */\n    public forget() {\n\n        this._prevParams = null;\n\n    }\n\n    /**\n     * Remove all bindings from signal and destroy any reference to external objects (destroy Signal object).\n     * <p><strong>IMPORTANT:</strong> calling any method on the signal instance after calling dispose will\n     * throw errors.</p>\n     */\n    public dispose() {\n\n        this.removeAll();\n\n        delete this._bindings;\n        delete this._prevParams;\n\n    }\n\n    /**\n     * @return {string} String representation of the object.\n     */\n    public toString():string {\n\n        return '[Signal active:' + this.active + ' numListeners:' + this.getNumListeners() + ']';\n\n    }\n\n}","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n/*\n*\t@desc   \tAn object that represents a binding between a Signal and a listener function.\n*               Released under the MIT license\n*\t\t\t\thttp://millermedeiros.github.com/js-signals/\n*\n*\t@version\t1.0 - 7th March 2013\n*\n*\t@author \tRichard Davey, TypeScript conversion\n*\t@author\t\tMiller Medeiros, JS Signals\n*\t@author\t\tRobert Penner, AS Signals\n*\n*/\nimport {Signal} from './Signal';\n\nexport class SignalBinding {\n\n    /**\n     * Object that represents a binding between a Signal and a listener function.\n     * <br />- <strong>This is an internal constructor and shouldn't be called by regular users.</strong>\n     * <br />- inspired by Joa Ebert AS3 SignalBinding and Robert Penner's Slot classes.\n     * @author Miller Medeiros\n     * @constructor\n     * @internal\n     * @name SignalBinding\n     * @param {Signal} signal Reference to Signal object that listener is currently bound to.\n     * @param {Function} listener Handler function bound to the signal.\n     * @param {booleanean} isOnce If binding should be executed just once.\n     * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent\n     * the `this` variable inside listener function).\n     * @param {Number} [priority] The priority level of the event listener. (default = 0).\n     */\n    constructor(signal:Signal, listener, isOnce:boolean, listenerContext, priority:number = 0) {\n\n        this._listener = listener;\n        this._isOnce = isOnce;\n        this.context = listenerContext;\n        this._signal = signal;\n        this.priority = priority || 0;\n\n    }\n\n    /**\n     * Handler function bound to the signal.\n     * @type Function\n     * @private\n     */\n    private _listener;\n\n    /**\n     * If binding should be executed just once.\n     * @type booleanean\n     * @private\n     */\n    private _isOnce:boolean;\n\n    /**\n     * Context on which listener will be executed (object that should represent the `this` variable inside\n     * listener function).\n     * @memberOf SignalBinding.prototype\n     * @name context\n     * @type Object|undefined|null\n     */\n    public context;\n\n    /**\n     * Reference to Signal object that listener is currently bound to.\n     * @type Signal\n     * @private\n     */\n    private _signal:Signal;\n\n    /**\n     * Listener priority\n     * @type Number\n     */\n    public priority:number;\n\n    /**\n     * If binding is active and should be executed.\n     * @type booleanean\n     */\n    public active:boolean = true;\n\n    /**\n     * Default parameters passed to listener during `Signal.dispatch` and `SignalBinding.execute`.\n     * (curried parameters)\n     * @type Array|null\n     */\n    public params:any = null;\n\n    /**\n     * Call listener passing arbitrary parameters.\n     * <p>If binding was added using `Signal.addOnce()` it will be automatically removed from signal dispatch queue,\n     * this method is used internally for the signal dispatch.</p>\n     * @param {Array} [paramsArr] Array of parameters that should be passed to the listener\n     * @return {*} Value returned by the listener.\n     */\n    public execute(paramsArr?:any[]) {\n\n        var handlerReturn;\n        var params;\n\n        if (this.active && !!this._listener) {\n\n            params = this.params ? this.params.concat(paramsArr) : paramsArr;\n\n            handlerReturn = this._listener.apply(this.context, params);\n\n            if (this._isOnce) {\n                this.detach();\n            }\n        }\n\n        return handlerReturn;\n\n    }\n\n    /**\n     * Detach binding from signal.\n     * - alias to: mySignal.remove(myBinding.getListener());\n     * @return {Function|null} Handler function bound to the signal or `null` if binding was previously detached.\n     */\n    public detach() {\n\n        return this.isBound() ? this._signal.remove(this._listener, this.context) : null;\n\n    }\n\n    /**\n     * @return {boolean} `true` if binding is still bound to the signal and have a listener.\n     */\n    public isBound():boolean {\n\n        return (!!this._signal && !!this._listener);\n\n    }\n\n    /**\n     * @return {boolean} If SignalBinding will only be executed once.\n     */\n    public isOnce():boolean {\n\n        return this._isOnce;\n\n    }\n\n    /**\n     * @return {Function} Handler function bound to the signal.\n     */\n    public getListener() {\n\n        return this._listener;\n\n    }\n\n    /**\n     * @return {Signal} Signal that listener is currently bound to.\n     */\n    public getSignal() {\n\n        return this._signal;\n\n    }\n\n    /**\n     * Delete instance properties\n     * @private\n     */\n    public _destroy() {\n\n        delete this._signal;\n        delete this._listener;\n        delete this.context;\n\n    }\n\n    /**\n     * @return {string} String representation of the object.\n     */\n    public toString():string {\n\n        return '[SignalBinding isOnce:' + this._isOnce + ', isBound:' + this.isBound() + ', active:'\n            + this.active + ']';\n\n    }\n}"],"sourceRoot":"/source/"}